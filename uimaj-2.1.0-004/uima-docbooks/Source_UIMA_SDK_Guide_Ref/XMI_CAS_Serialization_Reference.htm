<document>
  <properties>
    <title>XMI CAS Serialization Reference</title>
  </properties>
<body>

<div class="chapter">
<div class="Section1">



<section name="XMI CAS Serialization Reference"><a id="_crossRef386"> </a>



<p>This is the specification for the mapping of the UIMA CAS
into the XMI (XML Metadata Interchange<span class="footnote">

For details on XMI see Grose et al. <i>Mastering
XMI.  Java Programming with XMI, XML, and
UML. </i>John Wiley &amp; Sons, Inc. 2002.

</span>)
format.  XMI is an OMG standard for
expressing object graphs in XML.  The
UIMA SDK provides support for XMI through the classes
com.ibm.uima.cas.impl.XmiCasSerializer and
com.ibm.uima.cas.impl.XmiCasDeserializer.</p>



<subsection name="XMI Tag"><a id="_crossRef387"> </a>



<p>The outermost tag is &lt;XMI&gt; and must include a
version number and XML namespace attribute:</p>

<p class="xmp">&lt;xmi:XMI xmi:version=&quot;2.0&quot; xmlns:xmi=<a href="http://www.omg.org/XMI">http://www.omg.org/XMI</a>&gt;
  &lt;!-- CAS Contents here --&gt;
&lt;/xmi:XMI&gt;</p>

<p>XML namespaces<span class="footnote">http://www.w3.org/TR/xml-names11/</span> are used throughout.  The &quot;xmi&quot; namespace prefix is used to identify elements and
attributes that are defined by the XMI specification.  The XMI document will also define one
namespace prefix for each CAS namespace, as described in the next section.</p>




  </subsection>
<subsection name="Feature Structures"><a id="_crossRef388"> </a>



<p>UIMA Feature Structures are mapped to XML elements.  The name of the element is formed from the
CAS type name, making use of XML namespaces as follows.</p>

<p>The CAS type namespace is converted to an XML namespace
URI by the following rule: replace all dots with slashes, prepend http:///, and
append .ecore.</p>

<p>This mapping was chosen because it is the default mapping
used by the Eclipse Modeling Framework (EMF)<span class="footnote">
For details on EMF and Ecore see Budinsky et al.  <i>Eclipse
Modeling Framework 2.0</i>. Addison-Wesley. 2006.
</span> to
create namespace URIs from Java package names.  The use of the http scheme is a common convention, and does not imply
any HTTP communication.  The .ecore
suffix is due to the fact that the recommended type system definition for a
namespace is an ECore model, see <b><a class="crossrefText" href="XMI_and_EMF_Interoperability.htm#_crossRef382">XMI
and EMF Interoperability</a></b> <a class="crossrefPage" href="XMI_and_EMF_Interoperability.htm#_crossRef382"></a>.</p>

<p>Consider the CAS type name
&quot;org.myproj.Foo&quot;.   The CAS
namespace (&quot;org.myorg.&quot;) is converted to the XML namespace URI is
http:///org/myproj.ecore.  </p>

<p>The XML element name is then formed by concatenating the
XML namespace prefix (which is an arbitrary token, but typically we use the
last component of the CAS namespace) with the type name (excluding the
namespace). </p>

<p>So the example &quot;org.myproj.Foo&quot; FeatureStructure
is written to XMI as:</p>

<p class="xmp">&lt;xmi:XMI xmi:version=&quot;2.0&quot; xmlns:xmi=&quot;<a href="http://www.omg.org/XMI">http://www.omg.org/XMI</a>&quot;  xmlns:myproj=&quot;http:///org/myproj.ecore&quot;&gt;
  ...
  &lt;myproj:Foo xmi:id=&quot;1&quot;/&gt;
  ...
&lt;/xmi:XMI&gt;</p>

<p>The xmi:id attribute is only required if this object will
be referred to from elsewhere in the XMI document.  If provided, the xmi:id must be unique for
each feature.</p>

<p>All namespace prefixes (e.g. &quot;myproj&quot;) in this
example must be bound to URIs using the &quot;xmlns...&quot; attribute, as
defined by the XML namespaces specification.</p>




  </subsection>
<subsection name="Primitive Features"><a id="_crossRef389"> </a>



<p>CAS features of primitive types (currently String,
Integer, or Float, but others are possible) can be mapped either to XML
attributes or XML elements.  For example,
a CAS FeatureStructure of type org.myproj.Foo, with features:</p>

<p class="xmp">begin   = 14
end     = 19
myFeature = &quot;bar&quot;</p>

<p>could be mapped to: </p>

<p class="xmp">&lt;xmi:XMI xmi:version=&quot;2.0&quot; xmlns:xmi=&quot;<a href="http://www.omg.org/XMI">http://www.omg.org/XMI</a>&quot;
  xmlns:myproj=&quot;http:///org/myproj.ecore&quot;&gt;
  ...
  &lt;myproj:Foo xmi:id=&quot;1&quot; begin=&quot;14&quot; end=&quot;19&quot; myFeature=&quot;bar&quot;/&gt;
  ...
&lt;/xmi:XMI&gt;</p>

<p>or equivalently:</p>

<p class="xmp">&lt;xmi:XMI xmi:version=&quot;2.0&quot; xmlns:xmi=&quot;<a href="http://www.omg.org/XMI">http://www.omg.org/XMI</a>
  xmlns:myproj=&quot;http:///org/myproj.ecore&quot;&gt;
  ...
  &lt;myproj:Foo xmi:id=&quot;1&quot;&gt;
    &lt;begin&gt;14&lt;/begin&gt;
    &lt;end&gt;19&lt;/end&gt;
    &lt;myFeature&gt;bar&lt;/myFeature&gt;
  &lt;/myproj:Foo&gt;
  ...
&lt;/xmi:XMI&gt;</p>

<p>The attribute serialization is preferred for compactness,
but either representation is allowable.  Mixing the two styles is allowed; some features can be represented as
attributes and others as elements.</p>




  </subsection>
<subsection name="Reference Features"><a id="_crossRef390"> </a>



<p>CAS features that are references to other feature
structures (excluding arrays and lists, which are handled separately) are
serialized as ID references.  </p>

<p>If we add to the previous CAS example a feature structure
of type org.myproj.Baz, with feature &quot;myFoo&quot; that is a reference to
the Foo object, the serialization would be:</p>

<p class="xmp">&lt;xmi:XMI xmi:version=&quot;2.0&quot; xmlns:xmi=&quot;<a href="http://www.omg.org/XMI"><code>http://www.omg.org/XMI</code></a>&quot;
  xmlns:myproj=&quot;http:///org/myproj.ecore&quot;&gt;
  ...
  &lt;myproj:Foo xmi:id=&quot;1&quot; begin=&quot;14&quot; end=&quot;19&quot; myFeature=&quot;bar&quot;/&gt;
  &lt;myproj:Baz xmi:id=&quot;2&quot; myFoo=&quot;1&quot;/&gt;
  ...
&lt;/xmi:XMI&gt;</p>

<p>As with primitive-valued features, it is permitted to use
an element rather than an attribute.  However, the syntax is slightly different:</p>

<p class="xmp">&lt;myproj:Baz xmi:id=&quot;2&quot;&gt;
   &lt;myFoo href=&quot;#1&quot;/&gt;
&lt;myproj.Baz&gt;</p>

<p>Note that in the attribute representation, a reference
feature is indistinguishable from an integer-valued feature, so the meaning
cannot be determined without prior knowledge of the type system.  The element representation is unambiguous.</p>




  </subsection>
<subsection name="Array and List Features"><a id="_crossRef391"> </a>



<p>For a CAS feature whose range type is one of the CAS array
or list types, the XMI serialization depends on the setting of the
&quot;multipleReferencesAllowed&quot; attribute for that feature in the UIMA
Type System Description (see <b><a class="crossrefText" href="Component_Descriptor_Reference.htm#_crossRef124">Features</a></b> <a class="crossrefPage" href="Component_Descriptor_Reference.htm#_crossRef124"></a>.</p>

<p>An array or list with multipleReferencesAllowed = false
(the default) is serialized as a &quot;multi-valued&quot; property in XMI.  An array or list with
multipleReferencesAllowed = true is serialized as a first-class object.  Details are described below.</p>

<h3><a id="_crossRef392">Arrays and Lists as Multi-Valued
Properties</a></h3>

<p>In XMI, a multi-valued property is the most natural XMI
representation for most cases.  Consider
the example where the FeatureStructure of type org.myproj.Baz has a feature
myIntArray whose value is the integer array {2,4,6}.  This can be mapped to:</p>

<p class="xmp">&lt;myproj:Baz xmi:id=&quot;3&quot; myIntArray=&quot;2 4 6&quot;/&gt;</p>

<p>or equivalently:</p>

<p class="xmp">&lt;myproj:Baz xmi:id=&quot;3&quot;&gt;
  &lt;myIntArray&gt;2&lt;/myIntArray&gt;
  &lt;myIntArray&gt;4&lt;/myIntArray&gt;
  &lt;myIntArray&gt;6&lt;/myIntArray&gt;
&lt;/myproj:Baz&gt;</p>

<p>Note that String arrays whose elements contain embedded
spaces MUST use the latter mapping.</p>

<p>FSArray or FSList features are serialized in a similar
way.  For example an FSArray feature that
contains references to the elements with xmi:id's &quot;13&quot; and
&quot;42&quot; could be serialized as:</p>

<p class="xmp">&lt;myproj:Baz xmi:id=&quot;3&quot; myFsArray=&quot;13 42&quot;/&gt;</p>

<p>or:</p>

<p class="xmp">&lt;myproj:Baz xmi:id=&quot;3&quot;&gt;
  &lt;myFsArray href=&quot;#13&quot;/&gt;
  &lt;myFsArray href=&quot;#42&quot;/&gt;
&lt;/myproj:Baz&gt;</p>

<h3><a id="_crossRef393">Arrays and Lists as First-Class
Objects</a></h3>

<p>The multi-valued-property representation described in the
previous section does not allow multiple references to an array or list
object.  Therefore, it cannot be used for
features that are defined to allow multiple references (i.e. features for which
multipleReferencesAllowed = true in the Type System Description).</p>

<p>When multipleReferencesAllowed is set to true, array and
list features are serialized as references, and the array or list objects are
serialized as separate objects in the XMI. Consider again the example where the
FeatureStructure of type org.myproj.Baz has a feature myIntArray whose value is
the integer array {2,4,6}.  If myIntArray
is defined with multipleReferencesAllowed=true, the serialization will be as
follows:</p>

<p class="xmp">&lt;myproj:Baz xmi:id=&quot;3&quot; myIntArray=&quot;4&quot;/&gt;</p>

<p>or:</p>

<p class="xmp">&lt;myproj:Baz xmi:id=&quot;3&quot;&gt;
  &lt;myIntArray href=&quot;#4&quot;/&gt;
&lt;/myproj:Baz&gt;</p>

<p>with the array object serialized as:</p>

<p class="xmp">&lt;cas:IntegerArray xmi:id=&quot;4&quot; elements=&quot;2 4 6&quot;/&gt;</p>

<p>or:</p>

<p class="xmp">&lt;cas:IntegerArray xmi:id=&quot;4&quot;&gt;
  &lt;elements&gt;2&lt;/elements&gt;
  &lt;elements&gt;4&lt;/elements&gt;
  &lt;elements&gt;6&lt;/elements&gt;
&lt;/cas:IntegerArray&gt;</p>

<p>Note that in this case, the XML element name is formed
from the CAS type name (e.g. &quot;<code>uima.cas.IntegerArray</code>&quot;)
in the same way as for other FeatureStructures.  The elements of the array are serialized either as a space-separated
attribute named &quot;elements&quot; or as a series of child elements named
&quot;elements&quot;.  </p>

<p>List nodes are just standard FeatureStructures with
&quot;head&quot; and &quot;tail&quot; features, and are serialized using the
normal FeatureStructure serialization.  For example, an IntegerList with the values 2, 4, and 6 would be
serialized as the four objects:</p>

<p class="xmp">&lt;cas:NonEmptyIntegerList xmi:id=&quot;10&quot; head=&quot;2&quot; tail=&quot;11&quot;/&gt;
&lt;cas:NonEmptyIntegerList xmi:id=&quot;11&quot; head=&quot;4&quot; tail=&quot;12&quot;/&gt;
&lt;cas:NonEmptyIntegerList xmi:id=&quot;12&quot; head=&quot;6&quot; tail=&quot;13&quot;/&gt;
&lt;cas:EmptyIntegerList xmi:id&quot;13&quot;/&gt;</p>

<p>This representation of arrays allows multiple references
to an array of list.  It also allows a
feature with range type TOP to refer to an array or list.  However, it is a very unnatural
representation in XMI and does not support interoperability with other
XMI-based systems, so we instead recommend using the multi-valued-property
representation described in the previous section whenever it is possible.</p>




  </subsection>
<subsection name="Null Array/List Elements"><a id="_crossRef394"> </a>



<p>In UIMA, an element of an FSArray or FSList may be
null.  In XMI, multi-valued properties do
not permit null values.  As a workaround
for this, we will use a dummy instance of the special type cas:NULL, which has
xmi:id 0.  For example, in the following
example the &quot;myFsArray&quot; feature refers to an FSArray whose second
element is null:</p>

<p class="xmp">&lt;cas:NULL xmi:id=&quot;0&quot;/&gt;
&lt;myproj:Baz xmi:id=&quot;3&quot;&gt;
  &lt;myFsArray href=&quot;#13&quot;/&gt;
  &lt;myFsArray href=&quot;#0&quot;/&gt;
  &lt;myFsArray href=&quot;#42&quot;/&gt;
&lt;/myproj:Baz&gt;</p>




  </subsection>
<subsection name="Subjects of Analysis (Sofas) and Views"><a id="_crossRef395"> </a>



<p>A UIMA CAS contain one or more
subjects of analysis (Sofas).  These are
serialized no differently from any other feature structure.  For example:</p>

<p class="xmp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;ASCII&quot;?&gt;
&lt;xmi:XMI xmi:version=&quot;2.0&quot; xmlns:xmi=<a href="http://www.omg.org/XMI">http://www.omg.org/XMI</a>
                           xmlns:cas=&quot;http:///uima/cas.ecore&quot;&gt;
  &lt;cas:Sofa xmi:id=&quot;1&quot; sofaNum=&quot;1&quot;
            text=&quot;the quick brown fox jumps over the lazy dog.&quot;/&gt;
&lt;/xmi:XMI&gt;</p>

<p>Each Sofa defines a separate View.  Feature Structures in the CAS can be members
of one or more views.  (A Feature
Structure that is a member of a view is indexed in its IndexRepository, but
that is an implementation detail.)</p>

<p>In the XMI serialization, views will be represented as
first-class objects.  Each View has an
(optional) &quot;sofa&quot; feature, which references a sofa, and multi-valued
reference to the members of the View.  For example:</p>

<p class="xmp">&lt;cas:View sofa=&quot;1&quot; members=&quot;3 7 21 39 61&quot;/&gt;</p>

<p>Here the integers 3, 7, 21, 39, and 61 refer to the xmi:id
fields of the objects that are members of this view.</p>

<p>If the sofa feature is omitted, then this is interpreted
as the &quot;base&quot; view, whose members pertain to the artifact as a whole
rather than any individual Sofa.</p>




  </subsection>
<subsection name="Linking an XMI Document to its Ecore Type System"><a id="_crossRef396"> </a>



<p>If the CAS Type System has been saved to an Ecore file
(which is the subject of a different spec), it is possible to store a link from
an XMI document to that Ecore type system.  This is done using an xsi:schemaLocation attribute on the root XMI
element.</p>

<p>The xsi:schemaLocation attribute is a space-separated list
that represents a mapping from namespace URI (e.g. <a href="http://org/myproj.ecore">http:///org/myproj.ecore</a>)
to the physical URI of the .ecore file containing the type system for that
namespace.  For example:</p>

<p class="xmp">xsi:schemaLocation=
&quot;http:///org/myproj.ecore file:/c:/typesystems/myproj.ecore&quot;</p>

<p>would indicate that the definition for the org.myproj CAS
types is contained in the file <code>c:/typesystems/myproj.ecore</code>.  You can specify a different mapping for each of your CAS namespaces, using a space separated
list.  For details see Budinsky et
al.  <i>Eclipse Modeling Framework</i>.</p>

</div>

<br/>


<div class="Section2">



</div>
<div class="footnotesHere"></div>
</div>





  </subsection>

</section>
</body>
</document>
