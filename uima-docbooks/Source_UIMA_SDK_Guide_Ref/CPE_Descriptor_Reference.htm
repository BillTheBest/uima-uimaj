<document>
  <properties>
    <title>Collection Processing Engine Descriptor Reference</title>
  </properties>
<body>



<div class="chapter">
<div class="Section1">



<section name="Collection Processing Engine Descriptor Reference"><a id="_crossRef160"> </a>



<p>A UIMA <i>Collection Processing Engine</i> (CPE) is a
combination of UIMA components assembled to analyze a collection of
artifacts.  A CPE is an instantiation of
the UIMA <i>Collection Processing Architecture</i>, which defines the
collection processing components, interfaces, and APIs.  A CPE is executed by a UIMA framework
component called the <i>Collection Processing Manager</i> (CPM), which provides
a number of services for deploying CPEs, running CPEs, and handling errors.</p>

<p>A CPE can be assembled programmatically within a Java
application, or it can be assembled declaratively via a CPE configuration
specification, called a CPE Descriptor. This chapter describes the format of
the CPE Descriptor.</p>

<p>Details about the CPE, including its function,
sub-components, APIs, and related tools, can be found in <a class="crossrefText" href="CPE_Developers_Guide.htm#_crossRef183">Chapter
5, <b>Collection Processing
Engine Developer's Guide</b></a><i>.</i> Here we briefly summarize the
CPE to define terms and provide context for the later sections that describe
the CPE Descriptor.</p>



<subsection name="CPE Overview"><a id="_crossRef161"> </a>



<p><img alt="" width="550" height="301" src="../UIMA_SDK_Guide_Ref/CPE_Descriptor_Reference_files/image002.png"/></p>

<a class="figCaption" id="_crossRef162">CPE Runtime Overview</a>

<p>An illustration of the CPE runtime is shown in <a class="figReference" href="#_crossRef162">Figure nn</a>.  Some of the CPE components, such as the <i>queues</i> and <i>processing
pipelines</i>, are internal to the CPE, but their behavior and deployment may
be configured using the CPE Descriptor.  Other CPE components, such as the <i>Collection Reader</i> and <i>CAS
Processors</i>, are defined and configured externally from the CPE and then
plugged in to the CPE to create the overall engine.  The parts of a CPE are:</p>

<p><b>Collection Reader</b> &ndash;understands the native data
collection format and iterates over the collection producing subjects of
analysis</p>

<p><b>CAS Initializer</b> &ndash;initializes a CAS with a subject
of analysis</p>

<p><b>Artifact Producer</b> &ndash; asynchronously pulls CASes from
the Collection Reader, creates batches of CASes and puts them into the work
queue</p>

<p><b>Work Queue</b> &ndash; shared queue containing batches of
CASes queued by the Artifact Producer for analysis by Analysis Engines</p>

<p><b>B1-Bn</b> &ndash; individual batches containing 1 or more
CASes</p>

<p><b>AE1-AEn</b> &ndash; Analysis Engines arranged by a CPE
descriptor</p>

<p><b>Processing Pipelines</b> &ndash; each pipeline runs in a
separate thread and contains a replicated set of the Analysis Engines running
in the defined sequence</p>

<p><b>Output Queue</b> &ndash; holds batches of CASes with analysis
results intended for CAS Consumers</p>

<p><b>CAS Consumers</b> &ndash;perform collection level analysis
over the CASes and extract analysis results, e.g., creating indexes or
databases </p>






  </subsection>
<subsection name="Notation"><a id="_crossRef163"> </a>



<p>CPE Descriptors are XML files.  This chapter uses an informal notation to
specify the syntax of CPE Descriptors.  </p>

<p>The notation used in this chapter is:</p>

<ul><li>An
ellipsis (...) inside an element body indicates that the substructure
of that element has been omitted (to be described in another section of this chapter).
An example of this would be:
</li></ul>

<p class="xmp">&lt;collectionReader&gt;</p>

<p class="xmp">...</p>

<p class="xmp">&lt;/collectionReader&gt;</p>

<ul><li>An ellipsis immediately after an
element indicates that the element type may be repeated arbitrarily many
times.  For example:
</li></ul>

<p class="xmp">&lt;parameter&gt;[String]&lt;/parameter&gt;</p>

<p class="xmp">&lt;parameter&gt;[String]&lt;/parameter&gt;</p>

<p class="xmp">...</p>

<p>indicates that there may be
arbitrarily many parameter elements in this context.</p>

<ul><li>An ellipsis inside an element
means details of the attributes associated with that element are defined later,
e.g.:
</li></ul>

<p class="xmp">&lt;casProcessor ...&gt;</p>

<ul><li>Bracketed expressions (e.g. <code>[String]</code>) indicate the type of value that
may be used at that location.</li>


<li>A vertical bar, as in <code>true|false</code>, indicates alternatives.  This can be applied to literal values,
bracketed type names, and elements.
</li></ul>

<p>Which elements are optional and which are required is
specified in prose, not in the syntax definition.</p>




  </subsection>
<subsection name="Imports"><a id="_crossRef164"> </a>



<p>A CPE Descriptor uses the following notation to reference
descriptors for other components that are incorporated into the defined CPE:</p>

<p class="xmp">&lt;descriptor&gt;
    &lt;include href=&quot;[File]&quot;/&gt;
&lt;/descriptor&gt;</p>

<p>The <code>[File]</code>
attribute is a filename for the descriptor of the incorporated component.  A fully qualified filename may be provided,
or the filename may relative to a directory specified using the <code>CPM_HOME</code> variable, e.g.,</p>

<p class="xmp">&lt;descriptor&gt;
    &lt;include href=&quot;${CPM_HOME}/desc_dir/descriptor.xml&quot;/&gt;
&lt;/descriptor&gt;</p>

<p>In this case, the value for the <code>CPM_HOME</code>
variable must be provided to the CPE by specifying it on the Java command line,
e.g.,</p>

<p class="xmp">java -DCPM_HOME=&quot;C:/Program Files/apache/uima/cpm&quot; ...</p>

<p>Note that this mechanism for referencing other component
descriptor files is different from and in no way related to either of the two
import mechanisms described in <a class="crossrefText" href="Component_Descriptor_Reference.htm#_crossRef120">Chapter 23  </a></p>




  </subsection>
<subsection name="CPE Descriptor"><a id="_crossRef165"> </a>



<p>A CPE Descriptor consists of information describing the
following four main elements.</p>

<ol><li>The <i>Collection Reader</i>, which is responsible for gathering artifacts and
initializing the Common Analysis Structure (CAS) used to support processing in
the UIMA collection processing engine.</li>


<li>The <i>CAS Processors</i> responsible for analyzing individual artifacts,
analyzing across artifacts, and extracting analysis results.  CAS Processors include <i>Analysis Engines</i> and <i>CAS
Consumers</i>.</li>


<li>Operational parameters of the <i>Collection Processing Manager</i> (CPM),
such as checkpoint frequency and deployment mode.</li>


<li>Resource Manager Configuration
(optional).
</li></ol>

<p>The CPE Descriptor has the following high level skeleton:</p>

<p class="xmp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;cpeDescription&gt;
   &lt;collectionReader&gt;
...
   &lt;/collectionReader&gt;
   &lt;casProcessors&gt;
...
   &lt;/casProcessors&gt;
   &lt;cpeConfig&gt;
...
   &lt;/cpeConfig&gt;
   &lt;resourceManagerConfiguration&gt;
...
   &lt;/resourceManagerConfiguration&gt;
&lt;/cpeDescription&gt;</p>

<p>Details of each of the four main elements are described in
the sections that follow. </p>

<h3>Collection Reader</h3>

<p>The <code>&lt;collectionReader&gt;</code>
section identifies the Collection Reader and optional CAS Initializer that are
to be used in the CPE.  The Collection
Reader is responsible for retrieval of artifacts from a collection outside of
the CPE, and the optional CAS Initializer is responsible for initializing the
CAS with the artifact.  </p>

<p>A Collection Reader may initialize the CAS itself, in
which case it does not require a CAS Initializer.  This should be clearly specified in the
documentation for the Collection Reader.  Specifying a CAS Initializer for a Collection Reader that does not make
use of a CAS Initializer will not cause an error, but the specified CAS Initializer
will not be used.</p>

<p>The complete structure of the <code>&lt;collectionReader&gt;</code>
section is:</p>

<p class="xmp">&lt;collectionReader&gt;
  &lt;collectionIterator&gt;
    &lt;descriptor&gt;
      &lt;include href=&quot;[File]&quot;/&gt;
    &lt;/descriptor&gt;
    &lt;configurationParameterSettings&gt;...&lt;/configurationParameterSettings&gt;
    &lt;sofaNameMappings&gt;...&lt;/sofaNameMappings&gt;
  &lt;/collectionIterator&gt;
  &lt;casInitializer&gt;
    &lt;descriptor&gt;
      &lt;include href=&quot;[File]&quot;/&gt;
    &lt;/descriptor&gt;
    &lt;configurationParameterSettings&gt;...&lt;/configurationParameterSettings&gt;
    &lt;sofaNameMappings&gt;...&lt;/sofaNameMappings&gt;
  &lt;/casInitializer&gt;
&lt;/collectionReader&gt;</p>

<p>The <code>&lt;collectionIterator&gt;</code>
identifies the descriptor for the Collection Reader, and the <code>&lt;casInitializer&gt; </code>identifies the descriptor for the
CAS Initializer.  The format and details
of the Collection Reader and CAS Initializer descriptors are described in <a class="crossrefText" href="Component_Descriptor_Reference.htm#_crossRef120">Chapter 23  </a>. The <code>&lt;configurationParameterSettings&gt;
</code>and the <code>&lt;sofaNameMappings&gt;</code> elements are
described in the next section.</p>

<h4>Error handling for
Collection Readers</h4>

<p>The CPM will abort if the Collection Reader throws a large
number of consecutive exceptions (default = 100).  This default can by changed by using the Java
initialization parameter <code>-DMaxCRErrorThreshold xxx.</code></p>

<h3><a id="_crossRef166">CAS Processors</a></h3>

<p>The <code>&lt;casProcessors&gt;</code>
section identifies the components that perform the analysis on the input data,
including CAS analysis (Analysis Engines) and analysis results extraction (CAS
Consumers).  The CAS Consumers may also
perform collection level analysis, where the analysis is performed (or
aggregated) over multiple CASes.  The
basic structure of the CAS Processors section is:</p>

<p class="xmp">&lt;casProcessors dropCasOnException=&quot;true|false&quot; casPoolSize=&quot;[Number]&quot; processingUnitThreadCount=&quot;[Number]&quot;&gt;
    &lt;casProcessor ...&gt;
        ...
    &lt;/casProcessor&gt;
    &lt;casProcessor ...&gt;
        ...
    &lt;/casProcessor&gt;
    ...
&lt;/casProcessors&gt;</p>

<p>The <code>&lt;casProcessors&gt;</code>
section has two mandatory attributes and one optional attribute that configure
the characteristics of the CAS Processor flow in the CPE.  The first mandatory attribute is<a id="_crossRef167"> a casPoolSize</a>, which defines the fixed number of CAS
instances that the CPM will create and use during processing. All CAS instances
are maintained in a CAS Pool with a check-in and check-out access. Each CAS is checked-out
from the CAS Pool by the Collection Reader and initialized with an initial
subject of analysis. The CAS is checked-in into the CAS Pool when it is completely
processed, at the end of the processing chain. A larger CAS Pool size will
result in more memory being used by the CPM. CAS objects can be large and care
should be taken to determine the optimum size of the CAS Pool, weighing memory
tradeoffs with performance.</p>

<p><a id="_crossRef168">The second mandatory</a><a id="_crossRef169"> </a><code>&lt;casProcessors&gt;</code> attribute is <code>processingUnitThreadCount</code>,
which specifies the number of replicated <i>Processing Pipelines</i>.  Each Processing Pipeline runs in its own
thread.  The CPM takes CASes from the
work queue and submits each CAS to one of the Processing Pipelines for
analysis.  A Processing Pipeline contains
one or more Analysis Engines invoked in a given sequence.  If more than one Processing Pipeline is
specified, the CPM replicates instances of each Analysis Engine defined in the
CPE descriptor.  Each Processing Pipeline
thread runs independently, consuming CASes from work queue and depositing CASes
with analysis results onto the output queue.  On multiprocessor machines, multiple Processing Pipelines can run in
parallel, improving overall throughput of the CPM. </p>

<ul class="note"><li>The number of Processing Pipelines should be equal to or greater than
CAS Pool size. </li>


<li>Elements in the pipeline (each represented by a &lt;casProcessor&gt;
element) may indicate that they do not permit multiple deployment in their
Analysis Engine descriptor.  If so, even
though multiple pipelines are being used, all CASes passing through the
pipelines will be routed through one instance of these marked Engines.
</li></ul>

<p>The final, optional, &lt;casProcessors&gt; attribute is <code>dropCasOnException</code>. It defines a policy that determines
what happens with the CAS when an exception happens during processing. If the
value of this attribute is set to true and an exception happens, the CPM will
notify all registered listeners of the exception (see <b><a class="crossrefText" href="CPE_Developers_Guide.htm#_crossRef190">Using
Listeners</a></b> <a class="crossrefPage" href="CPE_Developers_Guide.htm#_crossRef190"></a>), clear the CAS and check the CAS back into the CAS
Pool so that it can be re-used. The presumption is that an exception may leave
the CAS in an inconsistent state and therefore that CAS should not be allowed
to move through the processing chain. When this attribute is omitted the CPM&rsquo;s
default is the same as specifying  <code>dropCasOnException=&quot;false&quot;</code>.</p>

<h4>Specifying an
Individual CAS Processor</h4>

<p>The CAS Processors that make up the Processing Pipeline
and the CAS Consumer pipeline are specified with the <code>&lt;casProcessor&gt;</code>
entity, which appears within the <code>&lt;casProcessors&gt;</code>
entity.  It may appear multiple times,
once for each CAS Processor specified for this CPE.  </p>

<p>The order of the <code>&lt;casProcessor&gt;</code>
entities with the <code>&lt;casProcessors&gt;</code> section
specifies the order in which the CAS Processors will run.  Although CAS Consumers are usually put at the
end of the pipeline, they need not be.  Also, Aggregate Analysis Engines may include CAS Consumers. </p>

<p>The overall format of the <code>&lt;casProcessor&gt;</code>
entity is:</p>

<p class="xmp">&lt;casProcessor deployment=&quot;local|remote|integrated&quot; name=&quot;[String]&quot; &gt;
    &lt;descriptor&gt;
        &lt;include href=[File]/&gt;
    &lt;/descriptor&gt;
    &lt;configurationParameterSettings&gt;...&lt;/configurationParameterSettings&gt;
    &lt;sofaNameMappings&gt;...&lt;/sofaNameMappings&gt;
    &lt;runInSeparateProcess&gt;...&lt;/runInSeparateProcess&gt;
    &lt;deploymentParameters&gt;...&lt;/deploymentParameters&gt;
    &lt;filter/&gt;
    &lt;errorHandling&gt;...&lt;/errorHandling&gt;
    &lt;checkpoint batch=&quot;Number&quot;/&gt;
&lt;/casProcessor&gt;</p>

<p><a id="_crossRef170">The </a><code>&lt;casProcessor&gt;</code> element
has two mandatory attributes, <code>deployment</code> and <code>name.</code>
The mandatory <code>name</code> attribute specifies a unique
string identifying the CAS Processor.  </p>

<p>The mandatory <code>deployment</code> attribute specifies the CAS
Processor deployment mode.  Currently,
three deployment options are supported:</p>

<ul class="compact"><li><code>integrated</code>
&ndash; indicates <i>integrated</i> deployment of the CAS Processor.  The CPM deploys and collocates the CAS
Processor in the same process space as the CPM.  This type of deployment is recommended to increase the performance of
the CPE.  However, it is NOT recommended
to deploy annotators containing JNI this way.  Such CAS Processors may cause a fatal exception and force the JVM to
exit without cleanup (bringing down the CPM).  Any UIMA SDK compliant pure Java CAS Processors may be safely deployed
this way.<br/>
<br/>
The descriptor for an integrated deployment can, in fact, be a remote service
descriptor.  When used this way, with
Vinci, the Sofa mapping needed for the remote is done before sending the CAS to
the remote (see <b><a class="crossrefText" href="SOFA_Developers_Guide.htm#_crossRef315">Name
Mapping for Remote Services</a></b> <a class="crossrefPage" href="SOFA_Developers_Guide.htm#_crossRef315"></a>).  When used
this way, however, the CPM error recovery options (see below) operate in the
integrated mode, which means that many of the retry options are not available.</li>


<li><code>remote</code>
&ndash; indicates <i>non-managed</i> deployment of the CAS Processor.  The CAS Processor descriptor referenced in
the <code>&lt;descriptor&gt;</code> element must be a
Vinci <i>Service Client Descriptor</i>, which identifies a remotely deployed
CAS Processor service (see <i>Section </i><a class="crossrefText" href="Application_Developers_Guide.htm#_crossRef64">6.6, <b>Working with Analysis Engine and CAS Consumer
Services</b></a>).  The
CPM assumes that the CAS Processor is already running as a remote service and
will connect to it using the URI provided in the client service
descriptor.  The lifecycle of a remotely
deployed CAS Processor is not managed by the CPM, so appropriate infrastructure
should be in place to start/restart such CAS Processors when necessary.  This deployment provides fault isolation and
is implementation (i.e., programming language) neutral.  </li>


<li><code>local</code> &ndash;
indicates <i>managed</i> deployment of the CAS Processor.  The CAS Processor descriptor referenced in the
<code>&lt;descriptor&gt;</code> element must be a Vinci <i>Service
Deployment Descriptor</i>, which configures a CAS Processor for deployment as a
Vinci service (see <i>Section </i><a class="crossrefText" href="Application_Developers_Guide.htm#_crossRef64">6.6, <b>Working with Analysis Engine and CAS Consumer
Services</b></a>).  The
CPM deploys the CAS Processor in a separate process and manages the life cycle
(start/stop) of the CAS Processor.  Communication between the CPM and the CAS Processor is done with
Vinci.  When the CPM completes
processing, the process containing the CAS Processor is terminated.  This deployment mode insulates the CPM from
the CAS Processor, creating a more robust deployment at the cost of a small
communication overhead.  On
multiprocessor machines, the separate processes may run concurrently and
improve overall throughput.
</li></ul>

<p>A number of elements may appear within the <code>&lt;casProcessor&gt;</code> element.  </p>

<h4><i>&lt;descriptor&gt; Element</i></h4>

<p>The <code>&lt;descriptor&gt;</code> element
is mandatory.  It identifies the
descriptor for the referenced CAS Processor using the syntax described in
Section <a class="crossrefText" href="Component_Descriptor_Reference.htm#_crossRef122">23.2
</a> above.  </p>

<ul class="compact"><li>For <code><i>remote</i></code>
CAS Processors, the referenced descriptor must be a Vinci <i>Service Client
Descriptor</i>, which identifies a remotely deployed CAS Processor
service.  </li>


<li>For <i>local</i> CAS Processors,
the referenced descriptor must be a Vinci <i>Service Deployment Descriptor</i>.</li>


<li>For <i>integrated</i> CAS
Processors, the referenced descriptor must be an Analysis Engine Descriptor
(primitive or aggregate).   
</li></ul>

<p>See Section <a class="crossrefText" href="Application_Developers_Guide.htm#_crossRef64">6.6, <b>Working with Analysis Engine and CAS Consumer
Services</b></a>  for more
information on creating these descriptors and deploying services.</p>

<h4><i>&lt;configurationParameterSettings&gt;
Element</i></h4>

<p>This element provides a way to override the contained
Analysis Engine's parameters settings.  Any entry specified here must already be defined; values specified
replace the corresponding values for each parameter.  <b><u>For Cas Processors, this mechanism is
only available when they are deployed in &quot;integrated&quot; mode.</u></b>  For Collection Readers and Initializers, it
always is available.</p>

<p>The content of this element is identical to the component
descriptor for specifying parameters (in the case where no parameter groups are
specified), except that the names for the primitive types have a &quot;_p&quot;
suffixed to them:  string_p, integer_p,
float_p.  Here is an example:</p>

<p><code>&lt;configurationParameterSettings&gt;<br/>
  &lt;nameValuePair&gt;<br/>
    &lt;name&gt;CivilianTitles&lt;/name&gt;<br/>
    &lt;value&gt;<br/>
      &lt;array&gt;<br/>
        &lt;string_p&gt;Mr.&lt;/string_p&gt;<br/>
        &lt;string_p&gt;Ms.&lt;/string_p&gt;<br/>
        &lt;string_p&gt;Mrs.&lt;/string_p&gt;<br/>
        &lt;string_p&gt;Dr.&lt;/string_p&gt;<br/>
      &lt;/array&gt;  <br/>
    &lt;/value&gt;<br/>
  &lt;/nameValuePair&gt;<br/>
  ...<br/>
&lt;/configurationParameterSettings&gt;</code></p>

<h4><a id="_crossRef171"><i>&lt;sofaNameMappings&gt;
Element</i></a></h4>

<p>This optional element provides a mapping from defined Sofa
names in the component, or the default Sofa name (if the component does not
declare any Sofa names).  The form of
this element is:</p>

<p class="xmp">&lt;sofaNameMappings&gt;
  &lt;sofaNameMapping cpeSofaName=&quot;a_CPE_name&quot;
                   componentSofaName=&quot;a_component_Name&quot;/&gt;
  ...
&lt;/sofaNameMappings&gt;</p>

<p>There can be any number of<code>
&lt;sofaNameMapping&gt;</code> elements contained in the <code>&lt;sofaNameMappings&gt;</code>
element.  The <code>componentSofaName</code>
attribute is optional;  leave it out to
specify a mapping for the _InitialView - that is, for Single-View components.</p>

<h4><i>&lt;runInSeparateProcess&gt; Element</i></h4>

<p>The <code>&lt;runInSeparateProcess&gt;</code>
element is mandatory for <code>local</code> CAS Processors, but
should not appear for <code>remote</code> or <code>integrated</code>
CAS Processors.  It enables the CPM to
create external processes using the provided runtime environment.  Applications launched this way communicate
with the CPM using the Vinci protocol and connectivity is enabled by a local instance
of the VNS that the CPM manages.  Since
communication is based on Vinci, the application need not be implemented in Java.
Any language for which Vinci provides support may be used to create an
application, and the CPM will seamlessly communicate with it.  The overall structure of this element is:</p>

<p class="xmp">&lt;runInSeparateProcess&gt;
    &lt;exec dir=&quot;[String]&quot; executable=&quot;[String]&quot;&gt;
        &lt;env key=&quot;[String]&quot; value =&quot;[String]&quot;/&gt;
        ...
        &lt;arg&gt;[String]&lt;/arg&gt;
        ...
    &lt;/exec&gt;
&lt;/runInSeparateProcess&gt;</p>

<p>The <code>&lt;exec&gt;</code> element
provides information about how to execute the referenced CAS Processor.  Two attributes are defined for the <code>&lt;exec&gt;</code> element.  The <code>dir</code> attribute is currently not used &ndash; it
is reserved for future functionality.  The <code>executable</code> attribute specifies the actual
Vinci service executable that will be run by the CPM, e.g., <code>java</code>, a batch script, an application (.exe), etc.  The executable must be specified with a fully
qualified path, or be found in the <code>PATH</code> of the CPM.</p>

<p>The <code>&lt;exec&gt;</code> element has
two elements within it that define parameters used to construct the command
line for executing the CAS Processor.  These elements must be listed in the order in which they should be
defined for the CAS Processor.  </p>

<p>The optional <code>&lt;env&gt;</code>
element is used to set an environment variable.  The variable <code>key</code> will be set to <code>value</code>.  For example,
</p>

<p class="xmp">&lt;env key=&quot;CLASSPATH&quot; value =&quot;C:Javalib&quot;/&gt;</p>

<p>will set the environment variable <code>CLASSPATH</code>
to the value <code>C:\Java\lib</code>.  The <code>&lt;env&gt;</code>
element may be repeated to set multiple environment variables.  All of the key/value pairs will be added to
the environment by the CPM prior to launching the executable.  </p>

<p><b>Note</b>:  <i>The
CPM actually adds ALL system environment variables when it launches the
program.  It queries the Operating System
for its current system variables and one by one adds them to the program's
process configuration.</i></p>

<p>The <code>&lt;arg&gt;</code> element is used
to specify arbitrary string arguments that will appear on the command line when
the CPM runs the command specified in the <code>executable</code>
attribute.  </p>

<p>For example, the following would be used to invoke the
UIMA Java implementation of the Vinci service wrapper on a Java CAS Processor:</p>

<p class="xmp">&lt;runInSeparateProcess&gt;
    &lt;exec executable=&quot;java&quot;&gt;
        &lt;arg&gt;-DVNS_HOST=localhost&lt;/arg&gt; 
        &lt;arg&gt;-DVNS_PORT=9099&lt;/arg&gt;
        &lt;arg&gt;com.ibm.uima.reference_impl.analysis_engine.service.
vinci.VinciAnalysisEngineService_impl&lt;/arg&gt; 
        &lt;arg&gt;C:uimadescdeployCasProcessor.xml&lt;/arg&gt;
    &lt;/exec&gt;
&lt;runInSeparateProcess&gt; </p>

<p>This will cause the CPM to run the following command line
when starting the CAS Processor:</p>

<p class="xmp">java -DVNS_HOST=localhost -DVNS_PORT=9099 com.ibm.uima.reference_impl.analysis_engine.service.vinci.VinciAnalysisEngineService_impl C:uimadescdeployCasProcessor.xml</p>

<p>The first argument specifies that the Vinci Naming Service
is running on the <code>localhost</code>.  The second argument specifies that the Vinci
Naming Service port number is <code>9099</code>.  The third argument identifies the UIMA
implementation of the Vinci service wrapper.  This class contains the <code>main</code> method that will
execute.  That main method in turn takes
a single argument &ndash; the filename for the CAS Processor service deployment
descriptor.  Thus the last argument
identifies the Vinci service deployment descriptor file for the CAS
Processor.  Since this is the same
descriptor file specified earlier in the <code>&lt;descriptor&gt;</code>
element, the string <code>${desc</code><code>riptor}</code>
can be used to refer to the descriptor, e.g.:</p>

<p class="xmp">&lt;arg&gt;${descriptor}&lt;/arg&gt;</p>

<p>The CPM will expand this out to the service deployment
descriptor file referenced in the <code>&lt;descriptor&gt;</code>
element. <a id="_crossRef172"></a></p>

<h4><a id="_crossRef173"><i>&lt;deploymentParameters&gt;
Element</i></a></h4>

<p>The <code>&lt;deploymentParameters&gt;</code>
element defines a number of deployment parameters that control how the CPM will
interact with the CAS Processor.  This
element has the following overall form:</p>

<p class="xmp">&lt;deploymentParameters&gt;
    &lt;parameter name=&quot;[String]&quot; value=&quot;...&quot; type=&quot;string|integer&quot; /&gt; 
    ...
&lt;/deploymentParameters&gt;</p>

<p>The <code>name</code> attribute
identifies the parameter, the <code>value</code> attribute specifies the value that will be assigned
to the parameter, and the <code>type</code> attribute
indicates the type of the parameter, either <code>string</code>
or <code>integer</code>.  The available parameters include:</p>

<ul class="compact"><li><code>vnsHost</code>
&ndash; (Deprecated) string parameter specifying the VNS host, e.g., <code>localhost</code> for local CAS Processors, host name or IP
address of VNS host for remote CAS Processors.  This parameter is deprecated; use the parameter specification instead
inside the Vinci <i>Service Client Descriptor</i>, if needed.  It is ignored for integrated and local deployments.  If present, for remote deployments, it
specifies the VNS Host to use, unless that is specified in the Vinci <i>Service
Client Descriptor</i>.</li>


<li><code>vnsPort </code>&ndash;
(Deprecated) integer parameter specifying the VNS port number.  This parameter is deprecated; use the
parameter specification instead inside the Vinci <i>Service Client Descriptor,</i>
if needed.  It is ignored for integrated
and local deployments.  If present, for
remote deployments, it specifies the VNS
 Port number to use, unless that is
specified in the Vinci <i>Service Client Descriptor.</i></li>


<li>service-access &ndash; string parameter
whose value must be &quot;exclusive&quot;, if present.  This parameter is only effective for remote
deployments.  It modifies the Vinci
service connections to be preallocated and dedicated, one service instance per
pipe-line.  It is only relevant for
non-Integrated deployement modes.  If
there are fewer services instances that are available (and alive &ndash; responding
to a &quot;ping&quot; request) than there are pipelines, the number of
pipelines (the number of concurrent threads) is reduced to match the number of
available instances.  If not specified,
the VNS is queried each time a service is needed, and a &quot;random&quot;
instance is assigned from the pool of available instances.   If a services dies during processing, the CPM
will use its normal error handling procedures to attempt to reconnect.  The number of attempts is specified in the
CPE descriptor for each Cas Processor using the <code>&lt;maxConsecutiveRestarts
value=&quot;10&quot; action=&quot;kill-pipeline&quot;  waitTimeBetweenRetries=&quot;50&quot; /&gt; </code>xml
element.  The &quot;value&quot; attribute
is the number of reconnection tries; the &quot;action&quot; says what to do if
the retries exceed the limit.  The
&quot;kill-pipeline&quot; action stops the pipeline that was associated with
the failing service (other pipelines will continue to work).  The CAS in process within a killed pipeline
will be dropped.  These events are
communicated to the application using the normal event listener mechanism. The <code>waitTimeBetweenRetries</code> says how many milliseconds to wait
inbetween attempts to reconnect.
</li></ul>

<p>For example, the following parameters might be used with a
CAS Processor deployed in local mode:</p>

<p class="xmp">&lt;deploymentParameters&gt;
  &lt;parameter name=&quot;service-access&quot; value=&quot;exclusive&quot; type=&quot;string&quot;/&gt; 
&lt;/deploymentParameters&gt;</p>

<h4><a id="_crossRef174"><i>&lt;filter&gt; Element</i></a></h4>

<p>The &lt;filter&gt; element is a required element but
currently should be left empty.  This
element is reserved for future use.</p>

<h4><a id="_crossRef175"><i>&lt;errorHandling&gt; Element</i></a></h4>

<p>The mandatory <code>&lt;er</code><code>rorHandling&gt;</code> element defines error and restart
policies for the CAS Processor.  Each CAS
Processor may define different actions in the event of errors and
restarts.  The CPM monitors and logs
errant behaviors and attempts to recover the component based on the policies
specified in this element.  </p>

<p>There are two kinds of faults.  </p>

<ol><li>One kind only occurs with non-integrated CAS Processors &ndash; this fault is
either a timeout attempting to launch or connect to the non-integrated
component, or some other kind of connection related exception (for instance,
the network connection might timeout or get reset).</li>


<li>The other kind happens when the CAS Processor component (an Annotator,
for example) throws any kind of exception.  This kind may occur with any kind of deployment, integrated or not.
</li></ol>

<p>The &lt;errorHandling&gt; has specifications for each of
these kinds of faults.  The format of
this element is:</p>

<p class="xmp">&lt;errorHandling&gt;
  &lt;maxConsecutiveRestarts action=&quot;continue|disable|terminate&quot;
                           value=&quot;[Number]&quot;/&gt;
  &lt;errorRateThreshold action=&quot;continue|disable|terminate&quot; value=&quot;[Rate]&quot;/&gt;
  &lt;timeout max=&quot;[Number]&quot;/&gt;
&lt;/errorHandling&gt;</p>

<p>The mandatory <code>&lt;maxConsecutiveRestarts&gt;</code> element
applies only to faults of the first kind, and therefore, only applies to
non-integrated deployments.  If such a
fault occurs, a retry is attempted, up to <code>value=&quot;[Number]&quot;</code>
of times.  This retry resets the connection
(if one was made) and attempts to reconnect and perhaps re-launch (see below
for details).  The original CAS (not a
partially updated one) is sent to the CAS Processor as part of the retry, once
the deployed component has been successfully restarted or reconnected to.</p>

<p>The <code>action</code> attribute specifies
the action to take when the threshold specified by the <code>value=&quot;[Number]&quot;</code>
is exceeded.  The possible actions are:</p>

<ul class="compact"><li><code>continue</code>
&ndash; skip any further processing for this CAS by this CAS Processor, and pass
the CAS to the next CAS Processor in the Pipeline. </li>


<li>The &quot;restart&quot; action is done, because it is needed for the
next CAS.</li>


<li>If the <code>dropCasOnException=</code>&quot;<code>true</code>&quot;, the CPM will NOT
pass the CAS to the next CAS Processor in the chain. Instead, the CPM will
abort processing of this CAS, release the CAS back to the CAS Pool and will
process the next CAS in the queue.</li>


<li>The counter counting the restarts toward the threshold is only reset
after a CAS is successfully processed. </li>


<li><code>disable</code>
&ndash; the current CAS is handled just as in the <code>continue</code>
case, but in addition, the CAS Processor is marked so that its <i>process()</i>
method will not be called again (i.e., it will be &quot;skipped&quot; for
future CASes)</li>


<li><code>terminate</code>
&ndash; the CPM will terminate all processing and exit
</li></ul>

<p>The definition of an error for the <code>&lt;maxConsecutiveRestarts&gt;</code>
element differs slightly for each of the three CAS Processor deployment modes:</p>

<table>
 <tr>
  <td>
  <p>local</p>
  </td>
  <td>
  <p>Local CAS Processors experience two general error
  types:</p>
  <ul style='margin-top:0in' type="disc">
   <li>launch errors &ndash;
       errors associated with launching a process</li>
   <li>processing errors &ndash;
       errors associated with sending Vinci commands to the process</li>
  </ul>
  <p>A launch error is defined by a failure of the
  process to successfully register with the local VNS within a default time
  window.  The current timeout is 15
  minutes.  Multiple local CAS Processors
  are launched sequentially, with a subsequent processor launched immediately
  after its previous processor successfully registers with the VNS.  </p>
  <p>A processing error is detected if a connection to
  the CAS Processor is lost or if the processing time exceeds a specified
  timeout value.</p>
  <p>For local CAS Processors, the
  &lt;maxConsecutiveRestarts&gt; element specifies the number of consecutive
  attempts made to launch the CAS Processor at CPM startup or after the CPM has
  lost a connection to the CAS Processor. </p>
  </td>
 </tr>
 <tr>
  <td>
  <p>remote</p>
  </td>
  <td>
  <p>For remote CAS Processors, the
  &lt;maxConsecutiveRestarts&gt; element applies to errors from sending Vinci
  commands.  An error is detected if a
  connection to the CAS Processor is lost, or if the processing time exceeds
  the timeout value specified in the &lt;timeout&gt; element (see below).</p>
  </td>
 </tr>
 <tr>
  <td>
  <p>integrated</p>
  </td>
  <td>
  <p>Although
  mandatory, the &lt;maxConsecutiveRestarts&gt; element is NOT used for
  integrated CAS Processors, because Integrated CAS Processors are not
  re-instantiated/restarted on exceptions. This setting is ignored by the CPM
  for Integrated CAS Processors but it is required. Future version of the CPM
  will make this element mandatory for remote and local CAS Processors only.</p>
  </td>
 </tr>
</table>

<p>The mandatory <code>&lt;errorRateThreshold&gt;</code>
element is used for all faults &ndash; both those above, and exceptions thrown by the
CAS Processor itself.  It specifies the
number of retries for exceptions thrown by the CAS Processor itself, a maximum
error rate, and the corresponding action to take when this rate is
exceeded.  The <code>value</code>
attribute specifies the error rate in terms of errors per sample size in the
form &ldquo;<code>N/M</code>&quot;, where <code>N</code>
is the number of errors and <code>M</code> is the sample size,
defined in terms of the number of documents.  </p>

<p>The first number is used also to indicate the maximum
number of retries.  If this number is
less than the <code>&lt;maxConsecutiveRestarts value=&quot;[Number]&quot;&gt;,
</code>it will override, reducing the number of &quot;restarts&quot;
attempted.  A retry is done only if the <code>dropCasOnException </code>is false.  If it is set to true, no retry occurs, but
the error is counted.  </p>

<p>When the number of counted errors exceeds the sample size,
an action specified by the <code>action</code> attribute is
taken.  The possible actions and their
meaning are the same as described above for the <code>&lt;maxConsecutiveRestarts&gt;</code>
element:</p>

<p><code>continue</code></p>

<p><code>disable</code></p>

<p><code>terminate</code></p>

<p>The <code>dropCasOnException=</code>&quot;<code>true</code>&quot; attribute of the <code>&lt;casProcessors&gt;</code> element modifies the action taken
for continue and disable, in the same manner as above. For example:</p>

<p class="xmp">&lt;errorRateThreshold value=&quot;3/1000&quot; action=&quot;disable&quot; /&gt;</p>

<p>specifies that each error thrown by the CAS Processor
itself will be retried up to 3 times (if <code>dropCasOnException</code>
is false) and the CAS Processor will be disabled if the error rate exceeds 3
errors in 1000 documents.  </p>

<p>If a document causes an error and the error rate threshold
for the CAS Processor is not exceeded, the CPM increments the CAS Processor&rsquo;s
error count and retries processing that document (if <code>dropCasOnException</code>
is false).  The retry means that the CPM
calls the CAS Processor&rsquo;s process() method again, passing in as an argument the
same CAS that previously caused an exception.  </p>

<ul class="note"><li>The CPM does not attempt to rollback any partial changes that may have
been applied to the CAS in the previous process() call.  
</li></ul>

<p>Errors are accumulated across documents.  For example, assume the error rate threshold
is <code>3/1000</code>.  The same document may fail three times before
finally succeeding on the fourth try, but the error count is now 3.  If one more error occurs within the current
sample of 1000 documents, the error rate threshold will be exceeded and the
specified action will be taken.  If no
more errors occur within the current sample, the error counter is reset to 0
for the next sample of 1000 documents.</p>

<p>The <code>&lt;timeout&gt;</code> element is
a mandatory element. Although mandatory for all CAS Processors, this element is
only relevant for local and remote CAS Processors. For integrated CAS
Processors, this element is ignored. In the current CPM implementation the
integrated CAS Processor process() method is not subject to timeouts. </p>

<p>The <code>max</code> attribute specifies the
maximum amount of time in milliseconds the CPM will wait for a process() method
to complete  When exceeded, the CPM will
generate an exception and will treat this as an error subject to the threshold
defined in the <code>&lt;errorRateThreshold&gt;</code> element
above, including doing retries.  </p>

<h4>Retry action taken
on a timeout</h4>

<p>The action taken depends on whether the CAS Processor is
local (managed) or remote (unmanaged).  Local CAS Processors (which are services) are killed and restarted, and
a new connection to them is established.  For remote CAS Processors, the connection to them is dropped, and a new
connection is reestablished (which may actually connect to a different instance
of the remote services, if it has multiple instances). </p>

<h4><a id="_crossRef176"><i>&lt;checkpoint&gt; Element</i></a></h4>

<p>The <code>&lt;checkpoint&gt;</code> element
is an optional element used to improve the performance of CAS Consumers.  It has a single attribute, <code>batch</code>, which specifies the number of CASes in a batch,
e.g.:</p>

<p class="xmp">&lt;checkpoint batch=&quot;1000&quot;&gt;</p>

<p>sets the batch size to 1000 CASes.  The batch size is the interval used to mark a
point in processing requiring special handling.  The CAS Processor's     <code>batchProcessComplete() </code>method will be called by the CPM
when this mark is reached so that the processor can take appropriate
action.  This mark could be used as a
mechanism to buffer up results in CAS Consumers and perform time-consuming
operations, such as check-pointing, that should not be done on a per-document
basis.</p>

<h3><a id="_crossRef177">CPE Operational Parameters</a></h3>

<p>The parameters for configuring the overall CPE and CPM are
specified in the <code>&lt;cpeConfig&gt;</code> section.  The overall format of this section is:</p>

<p class="xmp">&lt;cpeConfig&gt;</p>

<p class="xmp">    &lt;startAt&gt;[NumberOrID]&lt;/startAt&gt;</p>

<p class="xmp">    &lt;numToProcess&gt;[Number]&lt;/numToProcess&gt;</p>

<p class="xmp">    &lt;outputQueue dequeueTimeout=&quot;[Number]&quot; queueClass=&quot;[ClassName]&quot; /&gt;</p>

<p class="xmp">    &lt;checkpoint file=&quot;[File]&quot; time=&quot;[Number]&quot; batch=&quot;[Number]&quot;/&gt;</p>

<p class="xmp">    &lt;timerImpl&gt;[ClassName]&lt;/timerImpl&gt;</p>

<p class="xmp">    &lt;deployAs&gt;vinciService|interactive|immediate|single-threaded
&lt;/deployAs&gt;</p>

<p class="xmp">&lt;/cpeConfig&gt;</p>

<p>This section of the CPE descriptor allows for defining the
starting entity, the number of entities to process, a checkpoint file and frequency,
a pluggable timer, an optional output queue implementation, and finally a mode
of operation.  The mode of operation
determines how the CPM interacts with users and other systems.</p>

<p><a id="_crossRef178">The </a><code>&lt;startAt&gt;</code>
element is an optional argument.   It defines the starting entity in the collection at which the CPM should
start processing.</p>

<p>The implementation in the CPM passes the this argument to
the Collection Reader as the value of the parameter &quot;<code>startNumber</code>&quot;.   The CPM does not do anything else with this
parameter; in particular, the CPM has no ability to skip to a specific document
- that function, if available, is only provided by a particular Collection
Reader implementation.  </p>

<p>If the <code>&lt;startAt&gt;</code> element
is used, the Collection Reader descriptor must define a single-valued
configuration parameter with the name <code>startNumber</code>.  It can declare this value to be of any type;
the value passed in this XML element must be convertible to that type.  </p>

<p>A typical use is to declare this to be an integer type,
and to pass the sequential document number where processing should start.  An alternative implementation might take a
specific document ID; the collection reader could search through its collection
until it reaches this ID and then start there.  </p>

<p>This parameter will only make sense if the particular
collection reader is implemented to use the <code>startNumber</code>
configuration parameter.</p>

<p>The <a id="_crossRef179"><code>&lt;numToProcess&gt;</code>
element</a> is an optional element.  It specifies the total number of entities to process.  Use -1 to indicate ALL.  If not defined, the number of entities to
process will be taken from the Collection Reader configuration.  If present, this value overrides the
Collection <a id="_crossRef180">Reader configuration.</a></p>

<p>The <code>&lt;outputQueue&gt;</code>
element is an optional element. It enables plugging in a custom implementation
for the Output Queue. When omitted, the CPM will use a default output queue
that is based on First-in First-out (FIFO) model. </p>

<p>The UIMA SDK provides a second implementation
for the Output Queue that can be plugged in to the CPM, named <code>&quot;com.ibm.uima.reference_impl.<br/>
collection.cpm.engine.SequencedQueue&quot;</code>. </p>

<p>This implementation supports handling very
large documents that are split into &quot;chunks&quot;; it provides a delivery
mechanism that insures the sequential order of the chunks using information
carried in the CAS metadata. This metadata, which is required for this
implementation to work correctly, must be added as an instance of a Feature
Structure of type <code>com.ibm.es.tt.DocumentMetaData</code>
and referred to by an additional feature named <code>esDocumentMetaData</code> in the special instance of <code>uima.tcas.DocumentAnnotation</code> that is associated with the
CAS. This is usually done by the Collection Reader; the instance contains the
following features:</p>

<ol><li>sequenceNumber  &ndash; [Number]  the sequential number of a chunk, starting at
1. If not a chunk (i.e. complete document), the value should be 0.</li>


<li>documentId &ndash; [Number]
current document id. Chunks belonging to the same document have
identical document id.</li>


<li>isCompleted &ndash; [Number] 1 if the chunk is the last in a sequence, 0
otherwise. </li>


<li>url &ndash; [String] document url</li>


<li>throttleID &ndash; [String] special attribute currently used by OmniFind
</li></ol>

<p>This implementation of a sequenced queue
supports proper sequencing of CASes in CPM deployments that use document
chunking. Chunking is a technique of splitting large documents into pieces to
reduce overall memory consumption. Chunking does not depend on the number of
CASes in the CAS Pool. It works equally well with one or more CASes in the CAS
Pool. Each chunk is packaged in a separate CAS and placed in the Work Queue. If
the CAS Pool is depleted, the CollectionReader thread is suspended until a CAS
is released back to the pool by the processing threads. A document may be split
into 1, 2, 3 or more chunks that are analyzed independently. In order to
reconstruct the document correctly, the CAS Consumer can depend on receiving
the chunks in the same sequential order that the chunks were
&quot;produced&quot;, when this sequenced queue implementation is used. To plug
in this sequenced queue to the CPM  use
the following specification:</p>

<p><code>&lt;outputQueue
dequeueTimeout=&quot;100000&quot;
queueClass=&quot;com.ibm.uima.reference_impl.collection.cpm.engine.SequencedQueue&quot;/&gt;</code></p>

<p>where the mandatory <code>queueClass</code><code> </code>attribute defines
the name of the class and the second mandatory attribute, <code>dequeueTimeout </code>specifies the maximum number of
milliseconds to wait for the expected chunk. </p>

<ul class="note"><li>The value for this timeout must be carefully determined to avoid
excessive occurrences of timeouts.  Typically, the size of a chunk and the type of analysis being done are
the most important factors when deciding on the value for the timeout. The
larger the chunk and the more complicated analysis, the more time it takes for
the chunk to go from source to sink.
</li></ul>

<p>If the chunk doesn&rsquo;t arrive in the configured
time window, the entire document is presumed to be invalid and the CAS is
dropped from further processing.  This
action occurs regardless of any other error action specification.  The SequencedQueue invalidate the document,
adding the offending document&rsquo;s metadata to a local cache of invalid documents.
</p>

<p>If the time out occurs, the CPM notifies all
registered listeners (see <b><a class="crossrefText" href="CPE_Developers_Guide.htm#_crossRef190">Using
Listeners</a></b> <a class="crossrefPage" href="CPE_Developers_Guide.htm#_crossRef190"></a>) by calling entityProcessComplete(). As part of this
call, the SequencedQueue will pass null instead of a CAS as the first argument,
and a special exception &ndash; CPMChunkTimeoutException. The reason for passing null
as the first argument is because the time out occurs due to the fact that the
chunk has not been received in the configured timeout window, so there is no
CAS available when the timeout event occurs.  </p>

<p>The CPMChunkTimeoutException object exposes
an API that allows the listener to retrieve the offending document id as well
as the other metadata attributes as defined above. These attributes are part of
each chunk&rsquo;s metadata and are added by the Collection Reader. </p>

<p>Each chunk that SequencedQueue works on is
subjected to a test to determine if the chunk belongs to an invalid document.
This test checks the chunk&rsquo;s metadata against the data in the local cache. If
there is a match, the chunk is dropped. This check is only performed for chunks
and complete documents are not subject to this check.</p>

<p>If there is an exception during the
processing of a chunk, the CPM sends a notification to all registered
listeners. The notification includes the CAS and an exception.  When the listener notification is completed,
the CPM also sends separate notifications, containing the CAS, to the Artifact
Producer and the SequencedQueue. The intent is to stop adding new chunks to the
Work Queue that belong to an &quot;invalid&quot; document and also to deal with
chunks that are en-route, being processed by the processing threads.  </p>

<p>In response to the notification, the Artifact
Producer will drop and release back to the CAS Pool all CASes that belong to an
&quot;invalid&quot; document. Currently, there is no support in the
CollectionReader&rsquo;s API to tell it to stop generating chunks. The
CollectionReader keeps producing the chunks but the Artifact Producer
immediately drops/releases them to the CAS Pool. Before the CAS is released
back to the CAS Pool, the Artifact Producer sends notification to all
registered listeners. This notification includes the CAS and an exception &ndash;
SkipCasException. </p>

<p>In response to the notification of an
exception involving a chunk, the SequencedQueue retrieves from the CAS the
metadata and adds it to its local cache of &quot;invalid&quot; documents.  All chunks de-queued from the OutputQueue and
belonging to &quot;invalid&quot; documents will be dropped and released back to
the CAS Pool. Before dropping the CAS, the CPM sends notification to all
registered listeners. The notification includes the CAS and SkipCasException.</p>

<p>The <code>&lt;checkpoint&gt;</code>
element is an optional element.  It specifies a CPE checkpoint file, checkpoint frequency, and strategy
for checkpoints (time or count based).  At checkpoint time, the CPM saves status information and statistics to
the checkpoint file.  The checkpoint file
is specified in the <code>file</code> attribute, which has the
same form as the <code>href</code> attribute of the <code>&lt;include&gt;</code> element described in Section <a class="crossrefText" href="Component_Descriptor_Reference.htm#_crossRef122">23.2
</a>.  The <code>time</code> attribute indicates that a checkpoint should be taken
every <code>[Number]</code> seconds,
and the <code>b</code><code>atch</code> attribute
indicates that a checkpoint should be taken every <code>[Number]</code> batches.<a id="_crossRef181"></a></p>

<p>The <code>&lt;timerImpl&gt;</code>
element is optional.  It is
used to identify a custom timer plug-in class to generate time stamps during
the CPM execution.  The value of the
element is a Java class name.</p>

<p>The <code>&lt;deployAs&gt;</code> element
indicates the type of CPM deployment.  Valid contents for this element include:</p>

<ol class="compact"><li><code>vinciService</code>
&ndash; Vinci service exposing APIs for stop, pause, resume, and getStats</li>


<li><code>interactive</code>
&ndash; provide command line menus (start, stop, pause, resume)</li>


<li><code>immediate</code>
&ndash; run the CPM without menus or a service API</li>


<li><code>single-threaded</code>
&ndash; run the CPM in a single threaded mode. In this mode, the Collection Reader,
the Processing Pipeline, and the CAS Consumer Pipeline are all running in one
thread without the work queue and the output queue. 
</li></ol>

<h3>Resource Manager Configuration</h3>

<p>External
resource bindings for the CPE may optionally be specified in an element:</p>

<p class="xmp">&lt;resourceManagerConfiguration href=&quot;...&quot;/&gt;</p>

<p>For
an introduction to external resources, refer to sections <a class="crossrefText" href="Annotator_and_Analysis_Engine_Developers_Guide.htm#_crossRef28">4.5.4
</a>, <a class="crossrefPage" href="Annotator_and_Analysis_Engine_Developers_Guide.htm#_crossRef28"></a>.</p>

<p>In
the <code>resourceManagerConfiguration</code> element, the value of the href
attribute refers to another file that contains definitions and bindings for the
external resources used by the CPE.  The
format of this file is the same as the XML snippet <a class="crossrefPage" href="Component_Descriptor_Reference.htm#_crossRef144"></a>.  For example,
in a CPE containing an aggregate analysis engine with two annotators, and a CAS
Consumer, the following resource manager configuration file would bind external
resource dependencies in all three components to the same physical resource:</p>

<p class="xmp">&lt;resourceManagerConfiguration&gt;</p>

<p class="xmp">  &lt;!-- Declare Resource --&gt;</p>

<p class="xmp">  &lt;externalResources&gt;
    &lt;externalResource&gt;
      &lt;name&gt;ExampleResource&lt;/name&gt;
      &lt;fileResourceSpecifier&gt;
        &lt;fileUrl&gt;file:MyResourceFile.dat&lt;/fileUrl&gt;
      &lt;/fileResourceSpecifier&gt;
    &lt;/externalResource&gt;
  &lt;/externalResources&gt;</p>

<p class="xmp">  &lt;!-- Bind component resource dependencies to ExampleResource --&gt;</p>

<p class="xmp">  &lt;externalResourceBindings&gt;
    &lt;externalResourceBinding&gt;
      &lt;key&gt;MyAE/annotator1/myResourceKey&lt;/key&gt;
      &lt;resourceName&gt;ExampleResource&lt;/resourceName&gt;
    &lt;/externalResourceBinding&gt;</p>

<p class="xmp">    &lt;externalResourceBinding&gt;
      &lt;key&gt;MyAE/annotator2/someResourceKey&lt;/key&gt;
      &lt;resourceName&gt;ExampleResource&lt;/resourceName&gt;
    &lt;/externalResourceBinding&gt;</p>

<p class="xmp">    &lt;externalResourceBinding&gt;
      &lt;key&gt;MyCasConsumer/otherResourceKey&lt;/key&gt;
      &lt;resourceName&gt;ExampleResource&lt;/resourceName&gt;
    &lt;/externalResourceBinding&gt;</p>

<p class="xmp">  &lt;/externalResourceBindings&gt;</p>

<p class="xmp">&lt;/resourceManagerConfiguration&gt;</p>

<p>In
this example, <code>MyAE</code> and <code>MyCasConsumer</code> are
the names of the Analysis Engine and CAS Consumer, as specified by the name
attributes of the CPE's <code>&lt;casProcessor&gt;</code>
elements.  <code>annotator1</code> and <code>annotator2</code> are
the annotator keys specified within the Aggregate AE Descriptor, and <code>myResourceKey</code>, <code>someResourceKey</code>,
and <code>otherResourceKey</code> are the keys of the resource dependencies
declared in the individual annotator and CAS Consumer descriptors.</p>

<h3><a id="_crossRef182">Example CPE Descriptor</a></h3>



<p class="xmp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;cpeDescription&gt;
  &lt;collectionReader&gt;
    &lt;collectionIterator&gt;
      &lt;descriptor&gt;
        &lt;include href=&quot;C:Program FilesIBMuimadocsexamplesdescriptorscollection_readerXMLFileCollectionReader.xml&quot;/&gt;
      &lt;/descriptor&gt;
    &lt;/collectionIterator&gt;
    &lt;casInitializer&gt;
      &lt;descriptor&gt;
        &lt;include href=&quot;C:Program FilesIBMuimadocsexamplesdescriptorscas_initializerXMLCasInitializer.xml&quot;/&gt;
      &lt;/descriptor&gt;
    &lt;/casInitializer&gt;
  &lt;/collectionReader&gt;
  &lt;casProcessors dropCasOnException=&quot;true&quot; casPoolSize=&quot;1&quot; processingUnitThreadCount=&quot;1&quot;&gt;
    &lt;casProcessor deployment=&quot;integrated&quot; name=&quot;Aggregate TAE - Name Recognizer and Person Title Annotator&quot;&gt;
      &lt;descriptor&gt;
        &lt;include href=&quot;C:Program FilesIBMuimadocsexamplesdescriptorsanalysis_engineNamesAndPersonTitles_TAE.xml&quot;/&gt;
      &lt;/descriptor&gt;
      &lt;deploymentParameters/&gt;
      &lt;filter/&gt;
      &lt;errorHandling&gt;
        &lt;errorRateThreshold action=&quot;terminate&quot; value=&quot;100/1000&quot;/&gt;
                &lt;maxConsecutiveRestarts action=&quot;terminate&quot; value=&quot;30&quot;/&gt;
                &lt;timeout max=&quot;100000&quot;/&gt;
      &lt;/errorHandling&gt;
      &lt;checkpoint batch=&quot;1&quot;/&gt;
    &lt;/casProcessor&gt;
    &lt;casProcessor deployment=&quot;integrated&quot; name=&quot;Annotation Printer&quot;&gt;
      &lt;descriptor&gt;
        &lt;include href=&quot;C:Program FilesIBMuimadocsexamplesdescriptorscas_consumerAnnotationPrinter.xml&quot;/&gt;
      &lt;/descriptor&gt;
      &lt;deploymentParameters/&gt;
      &lt;filter/&gt;
      &lt;errorHandling&gt;
        &lt;errorRateThreshold action=&quot;terminate&quot; value=&quot;100/1000&quot;/&gt;
        &lt;maxConsecutiveRestarts action=&quot;terminate&quot; value=&quot;30&quot;/&gt;
        &lt;timeout max=&quot;100000&quot;/&gt;
      &lt;/errorHandling&gt;
      &lt;checkpoint batch=&quot;1&quot;/&gt;
    &lt;/casProcessor&gt;
  &lt;/casProcessors&gt;
  &lt;cpeConfig&gt;
    &lt;numToProcess&gt;1&lt;/numToProcess&gt;
    &lt;deployAs&gt;immediate&lt;/deployAs&gt;
    &lt;checkpoint file=&quot;&quot; time=&quot;3000&quot;/&gt;
    &lt;timerImpl/&gt;
  &lt;/cpeConfig&gt;
&lt;/cpeDescription&gt;</p>

</div>

<br/>


<div class="Section2">



</div>
<div class="footnotesHere"></div>
</div>



  </subsection>

</section>
</body>
</document>
