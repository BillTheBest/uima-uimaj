<document>
  <properties>
    <title>UIMA SDK Overview</title>
  </properties>
<body>



<div class="chapter">
<div class="Section1">



<section name="UIMA SDK Overview"><a id="_crossRef356"> </a>



<p>IBM&rsquo;s Unstructured Information Management Architecture
(UIMA) is an architecture and software framework for creating, discovering,
composing and deploying a broad range of multi-modal analysis capabilities and
integrating them with search technologies.</p>

<p>The <b><i>UIMA framework</i></b> provides a run-time
environment in which developers can plug in and run their UIMA component
implementations and with which they can build and deploy UIM applications. The
framework is not specific to any IDE or platform.</p>

<p>The <b><i>UIMA Software Development Kit (SDK)</i></b>
includes an all-Java implementation of the UIMA framework for the development,
description, composition and deployment of UIMA components and applications. It
also provides the developer with an Eclipse-based (<a
href="http://www.eclipse.org/">www.eclipse.org</a>) development environment
that includes a set of tools and utilities for using UIMA. </p>

<p>This chapter is the intended starting point for readers
that are new to the UIMA SDK.  It
includes this introduction and the following sections:</p>

<ul><li>Section <a class="crossrefText" href="UIMA SDK Overview.htm#_crossRef357">1.1, UIMA SDK
Documentation Overview</a>provides a list of the chapters included in the
UIMA SDK documentation with a brief summary of each.</li>


<li>Section <a class="crossrefText" href="UIMA SDK Overview.htm#_crossRef358">1.2, Using the
Documentation to get started with the UIMA SDK</a>describes a recommended path through the
documentation to help get the reader up and running with UIMA,</li>


<li>Section <a class="crossrefText" href="UIMA SDK Overview.htm#_crossRef359">1.3, What's new in Version 2.0</a>describes the main new capabilities in this
version of the UIMA SDK.
</li></ul>



<subsection name="UIMA SDK Documentation Overview"><a id="_crossRef357"> </a>





<table>
 <tr>
  <td>
  <p><span class="Heading4Char">Chapter</span></p>
  </td>
  <td>
  <p><span class="Heading4Char">Description</span><span class="Heading4Char"></span></p>
  </td>
 </tr>
 <tr>
  <td colspan="2">
  <p><span class="Heading4Char">Overviews</span><span class="Heading4Char"></span></p>
  </td>
 </tr>
 <tr>
  <td>
  <p><i>UIMA SDK Overview
  (This Chapter)</i></p>
  </td>
  <td>
  <p>Lists the documents provided in the UIMA SDK documentation
  set.</p>
  
  <p>Provides a recommended path through the documentation for
  getting started using UIMA.</p>
  
  <p>Includes release notes.</p>
  
  <p>Provides a brief high-level description of the different
  software modules included in the UIMA SDK.</p>
  </td>
 </tr>
 <tr>
  <td>
  <p><i>UIMA Conceptual
  Overview</i></p>
  </td>
  <td>
  <p>Provides a broad conceptual overview of the UIMA component
  architecture making contextual references to the other documents in the UIMA
  SDK documentation set that provide more detail.</p>
  </td>
 </tr>
 <tr>
  <td colspan="2">
  <p><span class="Heading4Char">Setting up</span><span class="Heading4Char"></span></p>
  </td>
 </tr>
 <tr>
  <td>
  <p><i>UIMA Eclipse Tooling
  Installation and Setup</i></p>
  </td>
  <td>
  <p>Provides step-by-step instructions for installing the UIMA
  SDK in the Eclipse Interactive Development Environment.</p>
  </td>
 </tr>
 <tr>
  <td colspan="2">
  <p><span class="Heading4Char">Developer's Guides</span><span class="Heading4Char"></span></p>
  </td>
 </tr>
 <tr>
  <td>
  <p><i>Annotator and AE Developer's Guide</i></p>
  </td>
  <td>
  <p>Tutorial-style guide for building UIMA annotators and
  analysis engines. This chapter introduces the developer to creating type
  systems and using UIMA&rsquo;s common data structure, the CAS or Common Analysis
  Structure. It demonstrates how to use built in tools to specify and create basic
  UIMA analysis components.</p>
  </td>
 </tr>
 <tr>
  <td>
  <p><i>CPE Developer's Guide</i></p>
  </td>
  <td>
  <p>Tutorial-style guide for building UIMA collection
  processing engines. These manage the analysis of collections of documents
  from source to sink.</p>
  </td>
 </tr>
 <tr>
  <td>
  <p><i>Application Developer's Guide</i></p>
  </td>
  <td>
  <p>Tutorial-style guide for using UIMA SDK to create, run and
  manage UIMA components from your application. Includes integration with
  semantic search engine and description of a simple GUI provided for
  submitting and running Semantic Search queries that can exploit UIMA
  analysis. Also describes APIs for saving and restoring the contents of a CAS
  using an XML format called XCAS.</p>
  </td>
 </tr>
 <tr>
  <td>
  <p><i>Flow Controller Developer's Guide</i></p>
  </td>
  <td>
  <p>When multiple components are combined in an Aggregate,
  each CAS flow among the various components.    UIMA provides two built-in flows, and also allows custom flows to be
  implemented.</p>
  </td>
 </tr>
 <tr>
  <td>
  <p><i>Developing Applications using Multiple Subjects of
  Analysis (Sofas)</i></p>
  </td>
  <td>
  <p>A single CAS maybe associated with multiple subjects of
  analysis (Sofas). These are useful for representing and analyzing different
  formats or translations of the same document. For multi-modal analysis, Sofas
  are good for different modal representations of the same stream (e.g., audio
  and close-captions).This chapter provides the developer details on how to use
  multiple Sofas in an application.</p>
  </td>
 </tr>
 <tr>
  <td>
  <p><i>CAS Multiplier Developer's Guide</i></p>
  </td>
  <td>
  <p>A component may add additional CASes into the
  workflow.  This may be useful to break
  up a large artifact into smaller units, or to create a new CAS that collects
  information from multiple other CASes.</p>
  </td>
 </tr>
 <tr>
  <td>
  <p><i>XMI&reg; and EMF Interoperability</i></p>
  </td>
  <td>
  <p>The UIMA Type system and the contents of the CAS itself
  can be externalized using the XMI standard for XML MetaData.  Eclipse Modeling Framework (EMF) tooling
  can be used to develop applications that use this information.</p>
  </td>
 </tr>
 <tr>
  <td colspan="2">
  <p><span class="Heading4Char">Tool User Guides</span><span class="Heading4Char"></span></p>
  </td>
 </tr>
 <tr>
  <td>
  <p><i>Component Descriptor Editor</i></p>
  </td>
  <td>
  <p>Describes the features of the Component Descriptor Editor
  Tool. This tool provides a GUI for specifying the details of UIMA component
  descriptors, including those for Analysis Engines (primitive and aggregate),
  Collection Readers, CAS Consumers and Type Systems. </p>
  </td>
 </tr>
 <tr>
  <td>
  <p><i>CPE Configurator</i></p>
  </td>
  <td>
  <p>Describes the User Interfaces and features of the CPE
  Configurator tool. This tool allows the user to select and configure the
  components of a Collection Processing Engine and then to run the engine.</p>
  </td>
 </tr>
 <tr>
  <td>
  <p><i>PEAR Packager</i></p>
  </td>
  <td>
  <p>Describes how to use the PEAR Packager utility. This
  utility enables developers to produce an archive file for an analysis engine
  that includes all required resources for installing that analysis engine in
  another UIMA environment.</p>
  </td>
 </tr>
 <tr>
  <td>
  <p><i>PEAR Installer</i></p>
  </td>
  <td>
  <p>Describes how to use the PEAR Installer utility. This
  utility installs and verifies an analysis engine from an archive file (PEAR)
  with all its resources in the right place so it is ready to run.</p>
  </td>
 </tr>
 <tr>
  <td>
  <p><i>PEAR Merger User's Guide</i></p>
  </td>
  <td>
  <p>Merges multiple PEAR packages into one.</p>
  </td>
 </tr>
 <tr>
  <td>
  <p><i>Document Analyzer</i></p>
  </td>
  <td>
  <p>Describes the features of a tool for applying a UIMA
  analysis engine to a set of documents and viewing the results.</p>
  </td>
 </tr>
 <tr>
  <td>
  <p><i>CAS Visual Debugger</i></p>
  </td>
  <td>
  <p>Describes the features of a tool for viewing the detailed
  structure and contents of a CAS. Good for debugging.</p>
  </td>
 </tr>
 <tr>
  <td>
  <p><i>JCasGen</i></p>
  </td>
  <td>
  <p>Describes how to run the JCasGen utility, which automatically
  builds Java classes that correspond to a particular CAS Type System.</p>
  </td>
 </tr>
 <tr>
  <td>
  <p><i>XCAS Viewer</i></p>
  </td>
  <td>
  <p>Describes how to run the supplied viewer for XCASes, used
  in the examples.</p>
  </td>
 </tr>
 <tr>
  <td colspan="2">
  <p><span class="Heading4Char">References </span><span class="Heading4Char"></span></p>
  </td>
 </tr>
 <tr>
  <td>
  <p><i>UIMA FAQs</i></p>
  </td>
  <td>
  <p>Frequently Asked Questions about general UIMA concepts.
  (Not a programming resource.)</p>
  </td>
 </tr>
 <tr>
  <td>
  <p><i>Glossary</i></p>
  </td>
  <td>
  <p>Main UIMA concepts and their basic definitions.</p>
  </td>
 </tr>
 <tr>
  <td>
  <p><i>Component Descriptor Reference</i></p>
  </td>
  <td>
  <p>Provides detailed XML format for all the UIMA component
  descriptors, except the CPE (see next)</p>
  </td>
 </tr>
 <tr>
  <td>
  <p><i>CPE Descriptor Reference</i></p>
  </td>
  <td>
  <p>Provides detailed XML format for the Collection Processing
  Engine descriptor.</p>
  </td>
 </tr>
 <tr>
  <td>
  <p><i>JavaDocs</i></p>
  </td>
  <td>
  <p>JavaDocs detailing the UIMA SDK programming interfaces</p>
  </td>
 </tr>
 <tr>
  <td>
  <p><i>CAS Reference</i></p>
  </td>
  <td>
  <p>Provides detailed description of the principal CAS
  interface.</p>
  </td>
 </tr>
 <tr>
  <td>
  <p><i>JCas Reference</i></p>
  </td>
  <td>
  <p>Provides details on the JCas, a native Java interface to
  the CAS.</p>
  </td>
 </tr>
 <tr>
  <td>
  <p><i>Semantic Search Engine Reference</i></p>
  </td>
  <td>
  <p>Describes how to write applications that query a semantic
  search engine index built using the UIMA SDK.</p>
  </td>
 </tr>
 <tr>
  <td>
  <p><i>PEAR Reference</i></p>
  </td>
  <td>
  <p>Provides detailed description of the deployable archive
  format for UIMA components.</p>
  </td>
 </tr>
 <tr>
  <td>
  <p><i>XMI CAS Serialization Reference</i></p>
  </td>
  <td>
  <p>Provides details about the XMI CAS Serialization</p>
  </td>
 </tr>
</table>




  </subsection>
<subsection name="Using the Documentation to get started with the UIMA SDK"><a id="_crossRef358"> </a>





<ol><li>Explore
this chapter to get an overview of the different documents that are included
with the SDK.</li>


<li>Read <a class="crossrefText" href="UIMA Conceputal Overview.htm#_crossRef320">Chapter 2, <b>UIMA Conceptual
Overview</b></a> to get a broad view of the basic UIMA concepts and philosophy with
reference to the other documents included in the SDK which provide greater
detail.</li>


<li>For more general information on
the UIMA architecture and how it has been used, refer to the IBM Systems
Journal special issue on Unstructured Information Management, on line at <a
href="http://www.research.ibm.com/journal/sj43-3.html">http://www.research.ibm.com/journal/sj43-3.html</a> or to the external UIMA website where key
publications are listed <a
href="http://www.research.ibm.com/UIMA/pubs.htm">http://www.research.ibm.com/UIMA/pubs.htm</a>. </li>


<li>Set up the UIMA SDK in your
Eclipse environment.  To do this, follow
the instructions in <a class="crossrefText" href="UIMA_SDK_Installation_and_Setup.htm#_crossRef372">Chapter 3, <b>UIMA SDK Setup for
Eclipse</b></a>.</li>


<li>Develop sample UIMA annotators,
run them and explore the results. Read <a class="crossrefText" href="Annotator_and_Analysis_Engine_Developers_Guide.htm#_crossRef1">Chapter 4, <b>Annotator and Analysis Engine Developer&rsquo;s Guide</b></a> and follow it like a tutorial to learn how to
develop your first UIMA annotator and set up and run your first UIMA analysis
engines. 


<ul><li>As part of this you will use a few
tools including


<ul><li>The UIMA Component Descriptor
Editor, described in more detail in <a class="crossrefText" href="Component_Descriptor_Editor_Users_Guide.htm#_crossRef96">Chapter 12, <b>Component Descriptor
Editor User&rsquo;s Guide</b></a>
and</li>


<li>The Document Analyzer,
described in more detail in <a class="crossrefText" href="Document_Analyzer_Users_Manual.htm#_crossRef205">Chapter 17, <b>Document Analyzer
User's Guide</b></a>
</li></ul></li>


<li>While following along in <a class="crossrefText" href="Annotator_and_Analysis_Engine_Developers_Guide.htm#_crossRef1">Chapter 4, <b>Annotator and Analysis Engine Developer&rsquo;s Guide</b></a> reference documents that may help are:


<ul><li><a class="crossrefText" href="Component_Descriptor_Reference.htm#_crossRef120">Chapter 23  </a>for understanding the analysis engine descriptors</li>


<li><a class="crossrefText" href="JCas_Reference.htm#_crossRef226">Chapter 27, <b>JCas Reference</b></a> for understanding the JCas
</li></ul>
</li></ul></li>


<li>Learn
how to create, run and manage a UIMA analysis engine as part of an application.
Connect your analysis engine to the provided semantic search engine to learn
how a complete analysis and search application may be built with the UIMA SDK. <a class="crossrefText" href="Application_Developers_Guide.htm#_crossRef44">Chapter 6, <b>Application Developer&rsquo;s
Guide</b></a> will guide you through
this process.


<ul><li>As part of this you will use the document analyzer (described in more
detail in <a class="crossrefText" href="Document_Analyzer_Users_Manual.htm#_crossRef205">Chapter 17, <b>Document Analyzer
User's Guide</b></a>) and semantic search GUI tools (described in
section <a class="crossrefText" href="Application_Developers_Guide.htm#_crossRef63">6.5.2, <b><i>Semantic
Search Query Tool</i></b></a>.
</li></ul></li>


<li>Pat
yourself on the back. Congratulations! If you reached this step successfully,
then you have an appreciation for the UIMA analysis engine architecture. You
would have built a few sample annotators, deployed UIMA analysis engines to
analyze a few documents, searched over the results using the built-in semantic search
engine and viewed the results through a built-in viewer &ndash; all as part of a
simple but complete application.</li>


<li>Develop
and run a Collection Processing Engine (CPE) to analyze and gather the results
of an entire collection of documents. <a class="crossrefText" href="CPE_Developers_Guide.htm#_crossRef183">Chapter 5, <b>Collection Processing
Engine Developer's Guide</b></a> will guide you through this process. 


<ul><li>As part of this you will use the
CPE Configurator tool. For details see <a class="crossrefText" href="CPE_Configurator_Users_Manual.htm#_crossRef152">Chapter 13, <b>Collection Processing
Engine Configurator User's Guide</b></a>.</li>


<li>You will also learn about CPE
Descriptors. The detailed format for these may be found in <a class="crossrefText" href="CPE_Descriptor_Reference.htm#_crossRef160">Chapter 24, <b>Collection
Processing Engine Descriptor Reference</b></a>.
</li></ul>
</li></ol>

<p>Learn how to package up an
analysis engine for easy installation into another UIMA environment. <a class="crossrefText" href="PEAR_Packager.htm#_crossRef251">Chapter 14, <b>PEAR Packager</b></a> and <a class="crossrefText" href="PEAR_Installer.htm#_crossRef246">Chapter
15, <b><i>PEAR
Installer User's Guide</i></b></a> will teach you how to create UIMA analysis
engine archives so that you can easily share your components with a broader
community.</p>




  </subsection>
<subsection name="What's new in Version 2.0"><a id="_crossRef359"> </a>



<p>Version
2.0 provide new capabilities and refines several areas of the UIMA
architecture.</p>

<h3><a id="_crossRef360">New Capabilities</a></h3>

<h4>New Primitive data types</h4>

<p>UIMA
now supports Boolean (bit), Byte, Short (16 bit integers), Long (64 bit
integers), and Double (64 bit floating point) primitive types, and arrays of
these.  These types can be used like all
the other primitive types.</p>

<h4>Simpler Analysis Engines and CASes</h4>

<p>Version
1.x made a distinction between Analysis Engines and Text Analysis Engines.  This distinction has been eliminated in
Version 2 - new code should just refer to Analysis Engines.  Analysis Engines can operate on multiple
kinds of artifacts, including text.</p>

<p>Version
1.x made a distinction between CASes and TCASes.  TCAS are now deprecated; new code should just
refer to CASes.  The JCas capability to
have a Java-friendly way to work with CAS types remains; we clarify that the
JCas is just (one of potentially several) interfaces to the CAS.</p>

<h4>Sofas and CAS Views simplified</h4>

<p>The
APIs for manipulating multiple subjects of analysis (Sofas) and their
corresponding CAS Views have been simplified.</p>

<h4>Analysis Component generalized to support multiple new CAS outputs</h4>

<p>Analysis
Components, in general, can make use of new capabilities to return multiple new
CASes, in addition to returning the original CAS that is passed in.  This allows components to have Collection
Reader-like capabilities, but be placed anywhere in the flow.  See <b><a class="crossrefText" href="Segmenter_Developers_Guide.htm#_crossRef273">CAS
Multiplier Developer's Guide</a></b> <a class="crossrefPage" href="Segmenter_Developers_Guide.htm#_crossRef273"></a>.</p>

<h4>User-customized flow controllers</h4>

<p>A
new component, the Flow Controller, can be supplied by the user to implement
arbitrary flow control for CASes within an Aggregate.  This is in addition to the two built-in flow
control choices of linear and language-capability flow.  See <b><a class="crossrefText" href="FlowController_Developers_Guide.htm#_crossRef213">Flow
Controller Developer's Guide</a></b> <a class="crossrefPage" href="FlowController_Developers_Guide.htm#_crossRef213"></a>.</p>

<h4>Search Engine updated with new capability to index Annotation feature
values</h4>

<p>The
search engine that is provided with the UIMA SDK has been upgraded to a later
release; it is more scalable and now has the ability to index additional
information from Annotations.  The <a
href="SIAPI.pdf">SIAPI.pdf</a> reference documentation for this has been
updated. The SemanticSearchCasIndexer now supports indexing individual features
of annotations in addition to their types.</p>

<h3><a id="_crossRef361">Backwards Compatibility</a></h3>

<p>For
the most part, applications and components should work unchanged under version
2.0  However, please note the following
non-compatible changes:</p>

<ul class="compact"><li>The format for indexes produced by the SemanticSearchCasIndexer has
changed. Indexes that were generated using the v1.x SDK cannot be read with
v2.0. You must reindex your content in v2.0. </li>


<li>There have been some changes to ResultSpecifications. We do not
guarantee 100% backwards compatibility for applications that made use of them,
although most cases should work. </li>


<li>For applications that deal with multiple subjects of analysis (Sofas),
the rules that determine whether a component is Multi-View or Single-View have
been made more consistent. A component is considered Multi-View if and only if
it declares at least one inputSofa or outputSofa in its descriptor. This leads
to the following incompatibilities in unusual cases: 


<ul><li>It is an error if an annotator that implements the TextAnnotator or
JTextAnnotator interface also declares inputSofas or outputSofas in its
descriptor. Such annotators must be Single-View. </li>


<li>Annotators that implement GenericAnnotator but do not declare any
inputSofas or outputSofas will now be passed the view of default Sofa instead
of the Base CAS.
</li></ul>
</li></ul>

<h3><a id="_crossRef362">Other changes</a></h3>

<p>TextAnalysisEngine
has been deprecated - it is now no different than AnalysisEngine.   Previous code that uses this should still
continue to work, however.</p>

<p>Methods
that were defined on the TCAS interface have been moved to the base CAS
interface; the TCAS interface is no longer needed.</p>

<p>The
DocumentAnalyzer tool saves outputs in the new XMI serialization format. The
XCasAnnotationViewer and SemanticSearchGUI tools can read both the new XMI
format and the previous XCAS format.</p>




  </subsection>
<subsection name="UIMA SDK Summary"><a id="_crossRef363"> </a>



<h3><a id="_crossRef364">General</a></h3>

<p>The UIMA SDK supports the development, discovery, composition
and deployment of multi-modal analytics for the analysis of unstructured
information and its integration with search technologies.</p>

<p>It includes APIs and tools for creating analysis
components. Examples of analysis components include tokenizers, summarizers,
categorizers, parsers, named-entity detectors etc.   Tutorial examples are provided with the SDK;
additional components are available from the community. </p>

<p>The UIMA SDK also includes a semantic search engine for
indexing the results of analysis and for using this semantic index to perform
more advanced search. </p>

<h3><a id="_crossRef365">Programming Language Support</a></h3>

<p>UIMA supports the development and integration of analysis
algorithms developed in different programming languages.  </p>

<p>The SDK is principally focussed on Java development.  It also includes facilities for C++  Enablement for UIMA Components which allow
UIMA components to be written in C++ and have access to a C++ version of the
CAS.  When used in this manner, the Java
UIMA framework can incorporate analytic functions written in C++.  Optional files included with the UIMA SDK
describe this functionality and provide example code.  See the <a href="CppeQuickStart.pdf">Quick
Start</a> manual for more information on this.</p>

<p>Other languages, including Python, Perl, and TCL, are
being added to the list.</p>

<h3><a id="_crossRef366">Multi-Modal Support</a></h3>

<p>The UIMA architecture supports the development, discovery,
composition and deployment of multi-modal analytics, including text, audio and
video. <b><a class="crossrefText" href="SOFA_Developers_Guide.htm#_crossRef286">Annotations,
Artifacts, and S</a></b><a class="crossrefPage" href="SOFA_Developers_Guide.htm#_crossRef286"></a> discuss this is more detail.</p>

<h3><a id="_crossRef367">Availability and Open Source</a></h3>

<p>The SDK is available from IBM's alphaWorks (<a
href="http://www.alphaworks.ibm.com/tech/uima">http://www.alphaworks.ibm.com/tech/uima</a>).  The source code for the main UIMA framework
is available on SourceForge (<a href="http://uima-framework.sourceforge.net/">http://uima-framework.sourceforge.net</a>
).</p>




  </subsection>
<subsection name="Summary of UIMA SDK Capabilities"><a id="_crossRef368"> </a>



<p><a id="_crossRef369"></a></p>



<table>
 <tr>
  <td>
  <p><b>Module</b></p>
  </td>
  <td>
  <p><b>Description</b></p>
  </td>
 </tr>
 <tr>
  <td>
  <p><i>UIMA Framework Core</i></p>
  </td>
  <td>
  <p>A framework integrating core functions for creating,
  deploying, running and managing UIMA components, including analysis engines
  and Collection Processing Engines in collocated and/or distributed
  configurations. </p>
  
  <p>The framework includes an implementation of core components
  for transport layer adaptation, CAS management, workflow management based on
  declarative specifications, resource management, configuration management,
  logging, and other functions.</p>
  </td>
 </tr>
 <tr>
  <td>
  <p><i>C++ and other
  programming language Interoperability</i></p>
  </td>
  <td>
  <p>Includes C++ CAS and supports the creation of UIMA
  compliant C++ components that can be deployed in the UIMA run-time through a
  built-in JNI adapter. This includes high-speed binary serialization.</p>
  
  <p>Includes support for creating service-based UIMA engines
  outside of SDK. This is ideal for wrapping existing code written in different
  languages.</p>
  </td>
 </tr>
 <tr>
  <td>
  <p><b>Externalized Framework Plug-ins</b></p>
  </td>
  <td>
  <p><b>Note that interfaces of these components are available to the
  developer but different implementations are possible in different
  implementations of the UIMA framework.</b></p>
  </td>
 </tr>
 <tr>
  <td>
  <p><i>CAS</i></p>
  </td>
  <td>
  <p>These classes
  provide the developer with typed access to the Common Analysis Structure
  (CAS), including type system schema, elements, subjects of analysis and
  indices. Multiple subjects of analysis (Sofas) mechanism supports the
  independent or simultaneous analysis of multiple views of the same artifacts
  (e.g. documents), supporting multi-lingual and multi-modal analysis.</p>
  </td>
 </tr>
 <tr>
  <td>
  <p><i>JCas</i></p>
  </td>
  <td>
  <p>An alternative
  interface to the CAS, providing Java-based UIMA Analysis components with
  native Java object access to CAS types and their attributes or features,
  using the JavaBeans conventions of getters and setters.</p>
  </td>
 </tr>
 <tr>
  <td>
  <p><i>Collection
  Processing Management (CPM)</i></p>
  </td>
  <td>
  <p>Core functions
  for running UIMA collection processing engines in collocated and/or
  distributed configurations. The CPM provides scalability across parallel
  processing pipelines, check-pointing, performance monitoring and
  recoverability.</p>
  </td>
 </tr>
 <tr>
  <td>
  <p><i>Resource Manager</i></p>
  </td>
  <td>
  <p>Provides UIMA
  components with run-time access to external resources handling capabilities
  such as resource naming, sharing, and caching.</p>
  </td>
 </tr>
 <tr>
  <td>
  <p><i>Configuration
  Manager</i></p>
  </td>
  <td>
  <p>Provides UIMA components with run-time access to their
  configuration parameter settings.</p>
  </td>
 </tr>
 <tr>
  <td>
  <p><i>Logger</i></p>
  </td>
  <td>
  <p>Provides access to a common logging facility.</p>
  </td>
 </tr>
 <tr>
  <td>
  <p><b>Tools and Utilities</b></p>
  </td>
  <td>
  
  </td>
 </tr>
 <tr>
  <td>
  <p><i>JCasGen</i></p>
  </td>
  <td>
  <p>Utility for generating a Java object model for CAS types
  from a UIMA XML type system definition.</p>
  </td>
 </tr>
 <tr>
  <td>
  <p><i>Saving and Restoring
  CAS contents</i></p>
  </td>
  <td>
  <p>APIs in the core framework support saving and restoring the
  contents of a CAS to streams using an XMI format.</p>
  </td>
 </tr>
 <tr>
  <td>
  <p><i>PEAR packager for
  Eclipse</i></p>
  </td>
  <td>
  <p>Tool for building a UIMA component archive to facilitate
  porting, registering, installing and testing components.</p>
  </td>
 </tr>
 <tr>
  <td>
  <p><i>PEAR Installer</i></p>
  </td>
  <td>
  <p>Tool for installing and verifying a UIMA component archive
  in a UIMA installation.</p>
  </td>
 </tr>
 <tr>
  <td>
  <p><i>PEAR Merger</i></p>
  </td>
  <td>
  <p>Utility that combines multiple PEARs into one.</p>
  </td>
 </tr>
 <tr>
  <td>
  <p><i>Component Descriptor
  Editor</i></p>
  </td>
  <td>
  <p>Eclipse Plug-in for specifying and configuring component
  descriptors for UIMA analysis engines as well as other UIMA component types
  including Collection Readers and CAS Consumers.</p>
  </td>
 </tr>
 <tr>
  <td>
  <p><i>CPE Configurator</i></p>
  </td>
  <td>
  <p>Graphical tool for configuring Collection Processing
  Engines and applying them to collections of documents.</p>
  </td>
 </tr>
 <tr>
  <td>
  <p><i>Java Annotation
  viewer</i></p>
  </td>
  <td>
  <p>Viewer for exploring annotations and related CAS data.</p>
  </td>
 </tr>
 <tr>
  <td>
  <p><i>CAS Visual Debugger</i></p>
  </td>
  <td>
  <p>Provides developer with detailed visual view of the contents
  of a CAS.</p>
  </td>
 </tr>
 <tr>
  <td>
  <p><i>Document Analyzer</i></p>
  </td>
  <td>
  <p>Graphical tool for applying analysis engines to sets of
  documents and viewing results. </p>
  </td>
 </tr>
 <tr>
  <td>
  <p><b>Example
  Analysis Components</b></p>
  </td>
  <td>
  <p> </p>
  </td>
 </tr>
 <tr>
  <td>
  <p><i>Semantic Search CAS
  Indexer</i></p>
  </td>
  <td>
  <p>CAS Consumer that uses the semantic search engine indexer
  to build an index from a stream of CASes. Requires the semantic search engine
  (included).</p>
  </td>
 </tr>
 <tr>
  <td>
  <p><i>Database Writer</i></p>
  </td>
  <td>
  <p>CAS Consumer that writes the content of selected CAS types
  into a relational database, using JDBC.    This code is in the doc/examples/src/com/ibm/uima/examples/<br/>
  cpe/PersonTitleDBWriterCasConsumer</p>
  </td>
 </tr>
 <tr>
  <td>
  <p><i>Annotators </i></p>
  </td>
  <td>
  <p>Set of simple annotators meant for pedagogical purposes.
  Includes: Date/time, Room-number, Regular expression, Tokenizer, and Meeting-finder
  annotator.  There are also sample
  Annotators in C++ and Python.  There
  are sample CAS Multipliers as well.</p>
  </td>
 </tr>
 <tr>
  <td>
  <p><i>Flow Controllers</i></p>
  </td>
  <td>
  <p>There is a sample flow-controller based on the whiteboard
  concept of sending the CAS to whatever annotator hasn't yet processed it,
  when that annotator's inputs are available in the CAS.</p>
  </td>
 </tr>
 <tr>
  <td>
  <p><i>File System
  Collection Reader</i></p>
  </td>
  <td>
  <p>Simple Collection Reader for pulling documents from the
  file system and initializing CASes.</p>
  </td>
 </tr>
 <tr>
  <td>
  <p><i>XMI Collection
  Reader,<br/>
   Cas Consumer</i></p>
  </td>
  <td>
  <p>Reads and writes the CAS in XMI format</p>
  </td>
 </tr>
 <tr>
  <td>
  <p><b>Search
  Components</b></p>
  </td>
  <td>
  <p> </p>
  </td>
 </tr>
 <tr>
  <td>
  <p><i>Semantic Search
  Engine</i></p>
  </td>
  <td>
  <p>Search Engine that supports searching over results of
  analysis including annotations and nested annotations using the &quot;XML
  Fragment&quot; query language.</p>
  </td>
 </tr>
 <tr>
  <td>
  <p><b>Components <u>not</u> currently
  available in this release of the UIMA SDK.</b></p>
  </td>
  <td>
  <p>If interested in these
  extensions please contact the UIMA team at IBM. T.J.
   Watson Research
   Center via
  www.ibm.com/research/uima</p>
  </td>
 </tr>
 <tr>
  <td>
  <p><i>Semantic search and
  Analysis Workbench (SAW)</i></p>
  </td>
  <td>
  <p>Graphical User Interface for applying analysis to build
  search indices and DBs and query interfaces for searching/exploring analysis
  results. Uses the semantic search engine and the EKDB (see below).</p>
  </td>
 </tr>
 <tr>
  <td>
  <p><i>Extracted Knowledge
  Database (EKDB)</i></p>
  </td>
  <td>
  <p>Database schema and APIs for creating and populating a
  relational database with analysis results including entity and relation
  annotations. Includes a CAS Consumer that populates the database. Semantic
  Analysis Workbench provides a front-end to this database and to the Semantic
  Search Engine&rsquo;s query processor.</p>
  </td>
 </tr>
</table>

<a class="tableCaption"  id="_crossRef370">UIMA SDK Capabilities</a>

</div>

<i><br/>
</i>

<div class="Section2">



</div>
<div class="footnotesHere"></div>
</div>



  </subsection>

</section>
</body>
</document>
